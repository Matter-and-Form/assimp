/*
Open Asset Import Library (ASSIMP)
----------------------------------------------------------------------

Copyright (c) 2006-2010, ASSIMP Development Team
All rights reserved.

Redistribution and use of this software in source and binary forms, 
with or without modification, are permitted provided that the 
following conditions are met:

* Redistributions of source code must retain the above
  copyright notice, this list of conditions and the
  following disclaimer.

* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the
  following disclaimer in the documentation and/or other
  materials provided with the distribution.

* Neither the name of the ASSIMP team, nor the names of its
  contributors may be used to endorse or promote products
  derived from this software without specific prior
  written permission of the ASSIMP Development Team.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

----------------------------------------------------------------------
*/

/** MACHINE-GENERATED by scripts/STEPImporter/CppGenerator.py */

#include "AssimpPCH.h"
#ifndef ASSIMP_BUILD_NO_STEP_IMPORTER

#include "STEPReaderGen.h"

namespace Assimp {
using namespace STEP;

namespace {

	typedef EXPRESS::ConversionSchema::SchemaEntry SchemaEntry;
	const SchemaEntry schema_raw[] =  {
		SchemaEntry("STEPAbsorbed_Dose_Measure",NULL )
,		SchemaEntry("STEPAcceleration_Measure",NULL )
,		SchemaEntry("STEPAction_Items",NULL )
,		SchemaEntry("STEPAction_Method_Items",NULL )
,		SchemaEntry("STEPAction_Request_Item",NULL )
,		SchemaEntry("STEPAhead_Or_Behind",NULL )
,		SchemaEntry("STEPAmount_Of_Substance_Measure",NULL )
,		SchemaEntry("STEPAngle_Direction_Reference_Select",NULL )
,		SchemaEntry("STEPAngle_Direction_Reference_With_A2p3d_Select",NULL )
,		SchemaEntry("STEPAngle_Relator",NULL )
,		SchemaEntry("STEPAnnotation_Plane_Element",NULL )
,		SchemaEntry("STEPAnnotation_Representation_Select",NULL )
,		SchemaEntry("STEPAnnotation_Symbol_Occurrence_Item",NULL )
,		SchemaEntry("STEPAnnotation_Text_Occurrence_Item",NULL )
,		SchemaEntry("STEPApproval_Item",NULL )
,		SchemaEntry("STEPApproved_Item",NULL )
,		SchemaEntry("STEPArea_Measure",NULL )
,		SchemaEntry("STEPArea_Or_View",NULL )
,		SchemaEntry("STEPAttribute_Classification_Item",NULL )
,		SchemaEntry("STEPAttribute_Language_Item",NULL )
,		SchemaEntry("STEPAttribute_Type",NULL )
,		SchemaEntry("STEPAxis2_Placement",NULL )
,		SchemaEntry("STEPB_Spline_Curve_Form",NULL )
,		SchemaEntry("STEPB_Spline_Surface_Form",NULL )
,		SchemaEntry("STEPBase_Solid_Select",NULL )
,		SchemaEntry("STEPBlend_End_Condition_Select",NULL )
,		SchemaEntry("STEPBlend_Radius_Variation_Type",NULL )
,		SchemaEntry("STEPBoolean_Operand",NULL )
,		SchemaEntry("STEPBoolean_Operator",NULL )
,		SchemaEntry("STEPBox_Characteristic_Select",NULL )
,		SchemaEntry("STEPBox_Height",NULL )
,		SchemaEntry("STEPBox_Rotate_Angle",NULL )
,		SchemaEntry("STEPBox_Slant_Angle",NULL )
,		SchemaEntry("STEPBox_Width",NULL )
,		SchemaEntry("STEPCamera_Model_D3_Multi_Clipping_Interection_Select",NULL )
,		SchemaEntry("STEPCamera_Model_D3_Multi_Clipping_Union_Select",NULL )
,		SchemaEntry("STEPCapacitance_Measure",NULL )
,		SchemaEntry("STEPCategory_Usage_Item",NULL )
,		SchemaEntry("STEPCc_Classified_Item",NULL )
,		SchemaEntry("STEPCc_Person_Organization_Item",NULL )
,		SchemaEntry("STEPCc_Specified_Item",NULL )
,		SchemaEntry("STEPCelsius_Temperature_Measure",NULL )
,		SchemaEntry("STEPCentral_Or_Parallel",NULL )
,		SchemaEntry("STEPCertification_Item",NULL )
,		SchemaEntry("STEPCertified_Item",NULL )
,		SchemaEntry("STEPChange_Request_Item",NULL )
,		SchemaEntry("STEPCharacter_Spacing_Select",NULL )
,		SchemaEntry("STEPCharacter_Style_Select",NULL )
,		SchemaEntry("STEPCharacterized_Action_Definition",NULL )
,		SchemaEntry("STEPCharacterized_Definition",NULL )
,		SchemaEntry("STEPCharacterized_Material_Property",NULL )
,		SchemaEntry("STEPCharacterized_Product_Composition_Value",NULL )
,		SchemaEntry("STEPCharacterized_Product_Definition",NULL )
,		SchemaEntry("STEPClass_Usage_Effectivity_Context_Item",NULL )
,		SchemaEntry("STEPClassification_Item",NULL )
,		SchemaEntry("STEPClassified_Item",NULL )
,		SchemaEntry("STEPCompound_Item_Definition",NULL )
,		SchemaEntry("STEPConductance_Measure",NULL )
,		SchemaEntry("STEPConfiguration_Design_Item",NULL )
,		SchemaEntry("STEPConfigured_Effectivity_Context_Item",NULL )
,		SchemaEntry("STEPConfigured_Effectivity_Item",NULL )
,		SchemaEntry("STEPConstructive_Geometry_Representation_Or_Shape_Represenation",NULL )
,		SchemaEntry("STEPContext_Dependent_Measure",NULL )
,		SchemaEntry("STEPContract_Item",NULL )
,		SchemaEntry("STEPContracted_Item",NULL )
,		SchemaEntry("STEPCount_Measure",NULL )
,		SchemaEntry("STEPCsg_Primitive",NULL )
,		SchemaEntry("STEPCsg_Select",NULL )
,		SchemaEntry("STEPCurve_Font_Or_Scaled_Curve_Font_Select",NULL )
,		SchemaEntry("STEPCurve_On_Surface",NULL )
,		SchemaEntry("STEPCurve_Or_Annotation_Curve_Occurrence",NULL )
,		SchemaEntry("STEPCurve_Or_Render",NULL )
,		SchemaEntry("STEPCurve_Style_Font_Select",NULL )
,		SchemaEntry("STEPDate_And_Time_Item",NULL )
,		SchemaEntry("STEPDate_Item",NULL )
,		SchemaEntry("STEPDate_Time_Item",NULL )
,		SchemaEntry("STEPDate_Time_Or_Event_Occurrence",NULL )
,		SchemaEntry("STEPDate_Time_Select",NULL )
,		SchemaEntry("STEPDay_In_Month_Number",NULL )
,		SchemaEntry("STEPDay_In_Week_Number",NULL )
,		SchemaEntry("STEPDay_In_Year_Number",NULL )
,		SchemaEntry("STEPDefined_Symbol_Select",NULL )
,		SchemaEntry("STEPDerived_Property_Select",NULL )
,		SchemaEntry("STEPDescription_Attribute_Select",NULL )
,		SchemaEntry("STEPDescriptive_Measure",NULL )
,		SchemaEntry("STEPDimension_Count",NULL )
,		SchemaEntry("STEPDimension_Extent_Usage",NULL )
,		SchemaEntry("STEPDimensional_Characteristic",NULL )
,		SchemaEntry("STEPDirection_Count_Select",NULL )
,		SchemaEntry("STEPDocument_Identifier_Assigned_Item",NULL )
,		SchemaEntry("STEPDocument_Reference_Item",NULL )
,		SchemaEntry("STEPDose_Equivalent_Measure",NULL )
,		SchemaEntry("STEPDraughting_Callout_Element",NULL )
,		SchemaEntry("STEPDraughting_Model_Item_Association_Select",NULL )
,		SchemaEntry("STEPDraughting_Model_Item_Select",NULL )
,		SchemaEntry("STEPDraughting_Titled_Item",NULL )
,		SchemaEntry("STEPEffectivity_Item",NULL )
,		SchemaEntry("STEPElectric_Charge_Measure",NULL )
,		SchemaEntry("STEPElectric_Current_Measure",NULL )
,		SchemaEntry("STEPElectric_Potential_Measure",NULL )
,		SchemaEntry("STEPEnergy_Measure",NULL )
,		SchemaEntry("STEPEvent_Occurrence_Item",NULL )
,		SchemaEntry("STEPExternal_Identification_Item",NULL )
,		SchemaEntry("STEPFill_Area_Style_Tile_Shape_Select",NULL )
,		SchemaEntry("STEPFill_Style_Select",NULL )
,		SchemaEntry("STEPFont_Select",NULL )
,		SchemaEntry("STEPForce_Measure",NULL )
,		SchemaEntry("STEPFounded_Item_Select",NULL )
,		SchemaEntry("STEPFrequency_Measure",NULL )
,		SchemaEntry("STEPGeneralized_Surface_Select",NULL )
,		SchemaEntry("STEPGeometric_Item_Specific_Usage_Select",NULL )
,		SchemaEntry("STEPGeometric_Set_Select",NULL )
,		SchemaEntry("STEPGroupable_Item",NULL )
,		SchemaEntry("STEPHour_In_Day",NULL )
,		SchemaEntry("STEPId_Attribute_Select",NULL )
,		SchemaEntry("STEPIdentification_Item",NULL )
,		SchemaEntry("STEPIdentifier",NULL )
,		SchemaEntry("STEPIlluminance_Measure",NULL )
,		SchemaEntry("STEPInductance_Measure",NULL )
,		SchemaEntry("STEPInstance_Usage_Context_Select",NULL )
,		SchemaEntry("STEPInvisibility_Context",NULL )
,		SchemaEntry("STEPInvisible_Item",NULL )
,		SchemaEntry("STEPIr_Usage_Item",NULL )
,		SchemaEntry("STEPKnot_Type",NULL )
,		SchemaEntry("STEPLabel",NULL )
,		SchemaEntry("STEPLayered_Item",NULL )
,		SchemaEntry("STEPLength_Measure",NULL )
,		SchemaEntry("STEPLimit_Condition",NULL )
,		SchemaEntry("STEPList_Of_Reversible_Topology_Item",NULL )
,		SchemaEntry("STEPList_Representation_Item",NULL )
,		SchemaEntry("STEPLuminous_Flux_Measure",NULL )
,		SchemaEntry("STEPLuminous_Intensity_Measure",NULL )
,		SchemaEntry("STEPMagnetic_Flux_Density_Measure",NULL )
,		SchemaEntry("STEPMagnetic_Flux_Measure",NULL )
,		SchemaEntry("STEPMarker_Select",NULL )
,		SchemaEntry("STEPMarker_Type",NULL )
,		SchemaEntry("STEPMass_Measure",NULL )
,		SchemaEntry("STEPMeasure_Value",NULL )
,		SchemaEntry("STEPMechanical_Design_And_Draughting_Relationship_Select",NULL )
,		SchemaEntry("STEPMechanical_Design_Geometric_Presentation_Area_Items",NULL )
,		SchemaEntry("STEPMechanical_Design_Geometric_Presentation_Representation_Items",NULL )
,		SchemaEntry("STEPMessage",NULL )
,		SchemaEntry("STEPMinute_In_Hour",NULL )
,		SchemaEntry("STEPMonth_In_Year_Number",NULL )
,		SchemaEntry("STEPMulti_Language_Attribute_Item",NULL )
,		SchemaEntry("STEPName_Attribute_Select",NULL )
,		SchemaEntry("STEPName_Item",NULL )
,		SchemaEntry("STEPNon_Negative_Length_Measure",NULL )
,		SchemaEntry("STEPNonnegative_Integer",NULL )
,		SchemaEntry("STEPNull_Style",NULL )
,		SchemaEntry("STEPNumeric_Measure",NULL )
,		SchemaEntry("STEPOrganization_Item",NULL )
,		SchemaEntry("STEPOrientation_Basis_Select",NULL )
,		SchemaEntry("STEPParameter_Value",NULL )
,		SchemaEntry("STEPPcurve_Or_Surface",NULL )
,		SchemaEntry("STEPPerson_And_Organization_Item",NULL )
,		SchemaEntry("STEPPerson_Organization_Select",NULL )
,		SchemaEntry("STEPPicture_Representation_Item_Select",NULL )
,		SchemaEntry("STEPPlane_Angle_Measure",NULL )
,		SchemaEntry("STEPPlane_Or_Planar_Box",NULL )
,		SchemaEntry("STEPPoint_And_Vector_Member",NULL )
,		SchemaEntry("STEPPoint_And_Vector_Members",NULL )
,		SchemaEntry("STEPPoint_Path_Members",NULL )
,		SchemaEntry("STEPPositive_Integer",NULL )
,		SchemaEntry("STEPPositive_Length_Measure",NULL )
,		SchemaEntry("STEPPositive_Plane_Angle_Measure",NULL )
,		SchemaEntry("STEPPositive_Ratio_Measure",NULL )
,		SchemaEntry("STEPPower_Measure",NULL )
,		SchemaEntry("STEPPreferred_Surface_Curve_Representation",NULL )
,		SchemaEntry("STEPPresentable_Text",NULL )
,		SchemaEntry("STEPPresentation_Representation_Select",NULL )
,		SchemaEntry("STEPPresentation_Size_Assignment_Select",NULL )
,		SchemaEntry("STEPPresentation_Style_Select",NULL )
,		SchemaEntry("STEPPresented_Item_Select",NULL )
,		SchemaEntry("STEPPressure_Measure",NULL )
,		SchemaEntry("STEPProduct_Definition_Or_Assembly_Relationship",NULL )
,		SchemaEntry("STEPProduct_Definition_Or_Breakdown_Element_Usage",NULL )
,		SchemaEntry("STEPProduct_Definition_Or_Product_Definition_Relationship",NULL )
,		SchemaEntry("STEPProduct_Or_Formation_Or_Definition",NULL )
,		SchemaEntry("STEPProject_Item",NULL )
,		SchemaEntry("STEPRadioactivity_Measure",NULL )
,		SchemaEntry("STEPRatio_Measure",NULL )
,		SchemaEntry("STEPRendering_Properties_Select",NULL )
,		SchemaEntry("STEPRepresented_Definition",NULL )
,		SchemaEntry("STEPRequirement_Assigned_Item",NULL )
,		SchemaEntry("STEPRequirement_Satisfaction_Item",NULL )
,		SchemaEntry("STEPRequirement_Source_Item",NULL )
,		SchemaEntry("STEPResistance_Measure",NULL )
,		SchemaEntry("STEPReversible_Topology",NULL )
,		SchemaEntry("STEPReversible_Topology_Item",NULL )
,		SchemaEntry("STEPRole_Select",NULL )
,		SchemaEntry("STEPRule_Superseded_Item",NULL )
,		SchemaEntry("STEPSecond_In_Minute",NULL )
,		SchemaEntry("STEPSecurity_Classification_Item",NULL )
,		SchemaEntry("STEPSet_Of_Reversible_Topology_Item",NULL )
,		SchemaEntry("STEPSet_Representation_Item",NULL )
,		SchemaEntry("STEPShading_Curve_Method",NULL )
,		SchemaEntry("STEPShading_Surface_Method",NULL )
,		SchemaEntry("STEPShape_Definition",NULL )
,		SchemaEntry("STEPShell",NULL )
,		SchemaEntry("STEPSi_Prefix",NULL )
,		SchemaEntry("STEPSi_Unit_Name",NULL )
,		SchemaEntry("STEPSize_Select",NULL )
,		SchemaEntry("STEPSketch_Basis_Select",NULL )
,		SchemaEntry("STEPSolid_Angle_Measure",NULL )
,		SchemaEntry("STEPSource",NULL )
,		SchemaEntry("STEPSource_Item",NULL )
,		SchemaEntry("STEPStart_Request_Item",NULL )
,		SchemaEntry("STEPString_Representation_Item_Select",NULL )
,		SchemaEntry("STEPStyle_Context_Select",NULL )
,		SchemaEntry("STEPSurface_Side",NULL )
,		SchemaEntry("STEPSurface_Side_Style_Select",NULL )
,		SchemaEntry("STEPSurface_Style_Element_Select",NULL )
,		SchemaEntry("STEPSymbol_Style_Select",NULL )
,		SchemaEntry("STEPText",NULL )
,		SchemaEntry("STEPText_Alignment",NULL )
,		SchemaEntry("STEPText_Delineation",NULL )
,		SchemaEntry("STEPText_Or_Character",NULL )
,		SchemaEntry("STEPText_Path",NULL )
,		SchemaEntry("STEPText_String_Representation_Item",NULL )
,		SchemaEntry("STEPThermodynamic_Temperature_Measure",NULL )
,		SchemaEntry("STEPTime_Interval_Item",NULL )
,		SchemaEntry("STEPTime_Measure",NULL )
,		SchemaEntry("STEPTolerance_Method_Definition",NULL )
,		SchemaEntry("STEPTransformation",NULL )
,		SchemaEntry("STEPTransition_Code",NULL )
,		SchemaEntry("STEPTrim_Condition_Select",NULL )
,		SchemaEntry("STEPTrim_Intent",NULL )
,		SchemaEntry("STEPTrimming_Preference",NULL )
,		SchemaEntry("STEPTrimming_Select",NULL )
,		SchemaEntry("STEPU_Direction_Count",NULL )
,		SchemaEntry("STEPUnit",NULL )
,		SchemaEntry("STEPV_Direction_Count",NULL )
,		SchemaEntry("STEPValue_Qualifier",NULL )
,		SchemaEntry("STEPVector_Or_Direction",NULL )
,		SchemaEntry("STEPVelocity_Measure",NULL )
,		SchemaEntry("STEPVolume_Measure",NULL )
,		SchemaEntry("STEPWeek_In_Year_Number",NULL )
,		SchemaEntry("STEPWork_Item",NULL )
,		SchemaEntry("STEPYear_Number",NULL )
,		SchemaEntry("STEPMeasure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAbsorbed_Dose_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDerived_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAbsorbed_Dose_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAbstract_Variable",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAcceleration_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAcceleration_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Directive",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Method",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Method_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Method_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Method_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Property",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Property_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Request_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Request_Solution",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Request_Status",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAction_Status",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAddress",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRepresentation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAdvanced_Brep_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFace_Surface",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAdvanced_Face",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAlternate_Product_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAmount_Of_Substance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPNamed_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAmount_Of_Substance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAngle_Direction_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRepresentation_Item",&STEP::ObjectHelper<STEPRepresentation_Item,1>::Construct )
,		SchemaEntry("STEPGeometric_Representation_Item",&STEP::ObjectHelper<STEPGeometric_Representation_Item,0>::Construct )
,		SchemaEntry("STEPDraughting_Callout",&STEP::ObjectHelper<STEPDraughting_Callout,1>::Construct )
,		SchemaEntry("STEPDimension_Curve_Directed_Callout",&STEP::ObjectHelper<STEPDimension_Curve_Directed_Callout,0>::Construct )
,		SchemaEntry("STEPAngular_Dimension",&STEP::ObjectHelper<STEPAngular_Dimension,0>::Construct )
,		SchemaEntry("STEPShape_Aspect_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Location",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAngular_Location",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Size",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAngular_Size",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Tolerance_With_Datum_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAngularity_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPStyled_Item",&STEP::ObjectHelper<STEPStyled_Item,2>::Construct )
,		SchemaEntry("STEPAnnotation_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Occurrence,0>::Construct )
,		SchemaEntry("STEPAnnotation_Curve_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Curve_Occurrence,0>::Construct )
,		SchemaEntry("STEPAnnotation_Fill_Area",&STEP::ObjectHelper<STEPAnnotation_Fill_Area,1>::Construct )
,		SchemaEntry("STEPAnnotation_Fill_Area_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Fill_Area_Occurrence,1>::Construct )
,		SchemaEntry("STEPAnnotation_Occurrence_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAnnotation_Occurrence_Associativity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAnnotation_Plane",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAnnotation_Symbol_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Symbol_Occurrence,0>::Construct )
,		SchemaEntry("STEPAnnotation_Subfigure_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Subfigure_Occurrence,0>::Construct )
,		SchemaEntry("STEPMapped_Item",&STEP::ObjectHelper<STEPMapped_Item,2>::Construct )
,		SchemaEntry("STEPAnnotation_Symbol",&STEP::ObjectHelper<STEPAnnotation_Symbol,0>::Construct )
,		SchemaEntry("STEPAnnotation_Text",&STEP::ObjectHelper<STEPAnnotation_Text,0>::Construct )
,		SchemaEntry("STEPAnnotation_Text_Character",&STEP::ObjectHelper<STEPAnnotation_Text_Character,1>::Construct )
,		SchemaEntry("STEPAnnotation_Text_Occurrence",&STEP::ObjectHelper<STEPAnnotation_Text_Occurrence,0>::Construct )
,		SchemaEntry("STEPShape_Aspect",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDerived_Shape_Aspect",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApex",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplication_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplication_Context_Element",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplication_Protocol_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Action_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Action_Method_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Action_Request_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Approval_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAttribute_Classification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Attribute_Classification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCertification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Certification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClassification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Classification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContract_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Contract_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_And_Time_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Date_And_Time_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Date_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Document_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Usage_Constraint_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Document_Usage_Constraint_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEffectivity_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Effectivity_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvent_Occurrence_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Event_Occurrence_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIdentification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternal_Identification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_External_Identification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGroup_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Group_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Identification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPName_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Name_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganization_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Organization_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganizational_Project_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Organizational_Project_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerson_And_Organization_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Person_And_Organization_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresented_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Presented_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSecurity_Classification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Security_Classification_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Time_Interval_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApplied_Usage_Right",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Date_Time",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Person_Organization",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPApproval_Status",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPArea_In_Set",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPArea_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPArea_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAssembly_Component_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAssembly_Component_Usage_Substitute",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAssigned_Requirement",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCompound_Representation_Item",&STEP::ObjectHelper<STEPCompound_Representation_Item,1>::Construct )
,		SchemaEntry("STEPAtomic_Formula",&STEP::ObjectHelper<STEPAtomic_Formula,0>::Construct )
,		SchemaEntry("STEPAttribute_Assertion",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAttribute_Language_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAttribute_Value_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAttribute_Value_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPAuxiliary_Geometric_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlacement",&STEP::ObjectHelper<STEPPlacement,1>::Construct )
,		SchemaEntry("STEPAxis1_Placement",&STEP::ObjectHelper<STEPAxis1_Placement,1>::Construct )
,		SchemaEntry("STEPAxis2_Placement_2d",&STEP::ObjectHelper<STEPAxis2_Placement_2d,1>::Construct )
,		SchemaEntry("STEPAxis2_Placement_3d",&STEP::ObjectHelper<STEPAxis2_Placement_3d,2>::Construct )
,		SchemaEntry("STEPCurve",&STEP::ObjectHelper<STEPCurve,0>::Construct )
,		SchemaEntry("STEPBounded_Curve",&STEP::ObjectHelper<STEPBounded_Curve,0>::Construct )
,		SchemaEntry("STEPB_Spline_Curve",&STEP::ObjectHelper<STEPB_Spline_Curve,5>::Construct )
,		SchemaEntry("STEPB_Spline_Curve_With_Knots",&STEP::ObjectHelper<STEPB_Spline_Curve_With_Knots,3>::Construct )
,		SchemaEntry("STEPSurface",&STEP::ObjectHelper<STEPSurface,0>::Construct )
,		SchemaEntry("STEPBounded_Surface",&STEP::ObjectHelper<STEPBounded_Surface,0>::Construct )
,		SchemaEntry("STEPB_Spline_Surface",&STEP::ObjectHelper<STEPB_Spline_Surface,6>::Construct )
,		SchemaEntry("STEPB_Spline_Surface_With_Knots",&STEP::ObjectHelper<STEPB_Spline_Surface_With_Knots,5>::Construct )
,		SchemaEntry("STEPProduct_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Software_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBack_Chaining_Rule",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBack_Chaining_Rule_Body",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPColour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBackground_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBeveled_Sheet_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBezier_Curve",&STEP::ObjectHelper<STEPBezier_Curve,0>::Construct )
,		SchemaEntry("STEPBezier_Surface",&STEP::ObjectHelper<STEPBezier_Surface,0>::Construct )
,		SchemaEntry("STEPGeneric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBinary_Generic_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBinary_Numeric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBinary_Representation_Item",&STEP::ObjectHelper<STEPBinary_Representation_Item,1>::Construct )
,		SchemaEntry("STEPBlock",&STEP::ObjectHelper<STEPBlock,4>::Construct )
,		SchemaEntry("STEPExpression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBoolean_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBoolean_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBoolean_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBoolean_Result",&STEP::ObjectHelper<STEPBoolean_Result,3>::Construct )
,		SchemaEntry("STEPComposite_Curve",&STEP::ObjectHelper<STEPComposite_Curve,2>::Construct )
,		SchemaEntry("STEPComposite_Curve_On_Surface",&STEP::ObjectHelper<STEPComposite_Curve_On_Surface,0>::Construct )
,		SchemaEntry("STEPBoundary_Curve",&STEP::ObjectHelper<STEPBoundary_Curve,0>::Construct )
,		SchemaEntry("STEPBounded_Pcurve",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBounded_Surface_Curve",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFounded_Item",&STEP::ObjectHelper<STEPFounded_Item,0>::Construct )
,		SchemaEntry("STEPBox_Domain",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPHalf_Space_Solid",&STEP::ObjectHelper<STEPHalf_Space_Solid,2>::Construct )
,		SchemaEntry("STEPBoxed_Half_Space",&STEP::ObjectHelper<STEPBoxed_Half_Space,1>::Construct )
,		SchemaEntry("STEPBreakdown_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBreakdown_Element_Group_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBreakdown_Element_Realization",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBreakdown_Element_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPBreakdown_Of",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSolid_Model",&STEP::ObjectHelper<STEPSolid_Model,0>::Construct )
,		SchemaEntry("STEPManifold_Solid_Brep",&STEP::ObjectHelper<STEPManifold_Solid_Brep,1>::Construct )
,		SchemaEntry("STEPBrep_With_Voids",&STEP::ObjectHelper<STEPBrep_With_Voids,1>::Construct )
,		SchemaEntry("STEPBytes_Representation_Item",&STEP::ObjectHelper<STEPBytes_Representation_Item,0>::Construct )
,		SchemaEntry("STEPDate",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCalendar_Date",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCamera_Image",&STEP::ObjectHelper<STEPCamera_Image,0>::Construct )
,		SchemaEntry("STEPCamera_Image_3d_With_Scale",&STEP::ObjectHelper<STEPCamera_Image_3d_With_Scale,0>::Construct )
,		SchemaEntry("STEPCamera_Model",&STEP::ObjectHelper<STEPCamera_Model,0>::Construct )
,		SchemaEntry("STEPCamera_Model_D3",&STEP::ObjectHelper<STEPCamera_Model_D3,2>::Construct )
,		SchemaEntry("STEPCamera_Model_D3_Multi_Clipping",&STEP::ObjectHelper<STEPCamera_Model_D3_Multi_Clipping,1>::Construct )
,		SchemaEntry("STEPCamera_Model_D3_Multi_Clipping_Intersection",&STEP::ObjectHelper<STEPCamera_Model_D3_Multi_Clipping_Intersection,1>::Construct )
,		SchemaEntry("STEPCamera_Model_D3_Multi_Clipping_Union",&STEP::ObjectHelper<STEPCamera_Model_D3_Multi_Clipping_Union,1>::Construct )
,		SchemaEntry("STEPCamera_Model_D3_With_Hlhsr",&STEP::ObjectHelper<STEPCamera_Model_D3_With_Hlhsr,1>::Construct )
,		SchemaEntry("STEPCamera_Model_With_Light_Sources",&STEP::ObjectHelper<STEPCamera_Model_With_Light_Sources,1>::Construct )
,		SchemaEntry("STEPRepresentation_Map",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCamera_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCapacitance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCapacitance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPoint",&STEP::ObjectHelper<STEPPoint,0>::Construct )
,		SchemaEntry("STEPCartesian_Point",&STEP::ObjectHelper<STEPCartesian_Point,1>::Construct )
,		SchemaEntry("STEPCartesian_Transformation_Operator",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCartesian_Transformation_Operator_2d",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCartesian_Transformation_Operator_3d",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Approval",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Certification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Contract",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Date_And_Time_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Person_And_Organization_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Security_Classification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCc_Design_Specification_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCelsius_Temperature_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCentre_Of_Symmetry",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCertification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCertification_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPChange",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPChange_Request",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Font_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Style_Outline",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Style_Stroke",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSymbol_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneric_Character_Glyph_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Symbol_Outline",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacter_Glyph_Symbol_Stroke",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneral_Property",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacteristic_Data_Column_Header",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneral_Property_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacteristic_Data_Column_Header_Link",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacteristic_Data_Table_Header",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacteristic_Data_Table_Header_Decomposition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGroup",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacteristic_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacterized_Class",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCharacterized_Object",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConic",&STEP::ObjectHelper<STEPConic,1>::Construct )
,		SchemaEntry("STEPCircle",&STEP::ObjectHelper<STEPCircle,1>::Construct )
,		SchemaEntry("STEPCircular_Runout_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClass",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClass_By_Extension",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClass_By_Intension",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClass_System",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEffectivity_Context_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClass_Usage_Effectivity_Context_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPClassification_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTopological_Representation_Item",&STEP::ObjectHelper<STEPTopological_Representation_Item,0>::Construct )
,		SchemaEntry("STEPConnected_Face_Set",&STEP::ObjectHelper<STEPConnected_Face_Set,1>::Construct )
,		SchemaEntry("STEPClosed_Shell",&STEP::ObjectHelper<STEPClosed_Shell,0>::Construct )
,		SchemaEntry("STEPCoaxiality_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPColour_Specification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPColour_Rgb",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCommon_Datum",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComparison_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComplex_Clause",&STEP::ObjectHelper<STEPComplex_Clause,0>::Construct )
,		SchemaEntry("STEPComplex_Conjunctive_Clause",&STEP::ObjectHelper<STEPComplex_Conjunctive_Clause,0>::Construct )
,		SchemaEntry("STEPComplex_Disjunctive_Clause",&STEP::ObjectHelper<STEPComplex_Disjunctive_Clause,0>::Construct )
,		SchemaEntry("STEPModified_Solid",&STEP::ObjectHelper<STEPModified_Solid,2>::Construct )
,		SchemaEntry("STEPShelled_Solid",&STEP::ObjectHelper<STEPShelled_Solid,2>::Construct )
,		SchemaEntry("STEPComplex_Shelled_Solid",&STEP::ObjectHelper<STEPComplex_Shelled_Solid,1>::Construct )
,		SchemaEntry("STEPComposite_Assembly_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Assembly_Sequence_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLaminate_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPart_Laminate_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Assembly_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Curve_Segment",&STEP::ObjectHelper<STEPComposite_Curve_Segment,3>::Construct )
,		SchemaEntry("STEPMaterial_Designation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Material_Designation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Shape_Aspect",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Sheet_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPComposite_Text",&STEP::ObjectHelper<STEPComposite_Text,1>::Construct )
,		SchemaEntry("STEPComposite_Text_With_Associated_Curves",&STEP::ObjectHelper<STEPComposite_Text_With_Associated_Curves,1>::Construct )
,		SchemaEntry("STEPComposite_Text_With_Blanking_Box",&STEP::ObjectHelper<STEPComposite_Text_With_Blanking_Box,1>::Construct )
,		SchemaEntry("STEPComposite_Text_With_Delineation",&STEP::ObjectHelper<STEPComposite_Text_With_Delineation,1>::Construct )
,		SchemaEntry("STEPComposite_Text_With_Extent",&STEP::ObjectHelper<STEPComposite_Text_With_Extent,1>::Construct )
,		SchemaEntry("STEPCompound_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConcentricity_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConcept_Feature_Operator",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConcept_Feature_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConcept_Feature_Relationship_With_Condition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConditional_Concept_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConductance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConductance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfigurable_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Design",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEffectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Item_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Item_Hierarchical_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfiguration_Item_Revision_Sequence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfigured_Effectivity_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConfigured_Effectivity_Context_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConical_Stepped_Hole_Transition",&STEP::ObjectHelper<STEPConical_Stepped_Hole_Transition,3>::Construct )
,		SchemaEntry("STEPElementary_Surface",&STEP::ObjectHelper<STEPElementary_Surface,1>::Construct )
,		SchemaEntry("STEPConical_Surface",&STEP::ObjectHelper<STEPConical_Surface,2>::Construct )
,		SchemaEntry("STEPConnected_Edge_Set",&STEP::ObjectHelper<STEPConnected_Edge_Set,1>::Construct )
,		SchemaEntry("STEPConnected_Face_Sub_Set",&STEP::ObjectHelper<STEPConnected_Face_Sub_Set,1>::Construct )
,		SchemaEntry("STEPConstructive_Geometry_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRepresentation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConstructive_Geometry_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContact_Ratio_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInvisibility",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContext_Dependent_Invisibility",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOver_Riding_Styled_Item",&STEP::ObjectHelper<STEPOver_Riding_Styled_Item,1>::Construct )
,		SchemaEntry("STEPContext_Dependent_Over_Riding_Styled_Item",&STEP::ObjectHelper<STEPContext_Dependent_Over_Riding_Styled_Item,1>::Construct )
,		SchemaEntry("STEPContext_Dependent_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContext_Dependent_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContract",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContract_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPContract_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPConversion_Based_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCoordinated_Universal_Time_Offset",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCsg_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCsg_Solid",&STEP::ObjectHelper<STEPCsg_Solid,1>::Construct )
,		SchemaEntry("STEPCurrency",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurrency_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Bounded_Surface",&STEP::ObjectHelper<STEPCurve_Bounded_Surface,3>::Construct )
,		SchemaEntry("STEPCurve_Dimension",&STEP::ObjectHelper<STEPCurve_Dimension,0>::Construct )
,		SchemaEntry("STEPCurve_Replica",&STEP::ObjectHelper<STEPCurve_Replica,2>::Construct )
,		SchemaEntry("STEPCurve_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Style_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Style_Font_And_Scaling",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Style_Font_Pattern",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Style_Rendering",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCurve_Swept_Solid_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPCylindrical_Surface",&STEP::ObjectHelper<STEPCylindrical_Surface,1>::Construct )
,		SchemaEntry("STEPCylindricity_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPData_Environment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_And_Time",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_Time_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDate_Time_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDated_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDatum",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDatum_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDatum_Feature_Callout",&STEP::ObjectHelper<STEPDatum_Feature_Callout,0>::Construct )
,		SchemaEntry("STEPDatum_Reference",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDatum_Target",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDatum_Target_Callout",&STEP::ObjectHelper<STEPDatum_Target_Callout,0>::Construct )
,		SchemaEntry("STEPDefault_Tolerance_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDefault_Tolerance_Table_Cell",&STEP::ObjectHelper<STEPDefault_Tolerance_Table_Cell,0>::Construct )
,		SchemaEntry("STEPDefined_Symbol",&STEP::ObjectHelper<STEPDefined_Symbol,2>::Construct )
,		SchemaEntry("STEPDefinitional_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDefinitional_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDefinitional_Representation_Relationship_With_Same_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDegenerate_Pcurve",&STEP::ObjectHelper<STEPDegenerate_Pcurve,2>::Construct )
,		SchemaEntry("STEPToroidal_Surface",&STEP::ObjectHelper<STEPToroidal_Surface,2>::Construct )
,		SchemaEntry("STEPDegenerate_Toroidal_Surface",&STEP::ObjectHelper<STEPDegenerate_Toroidal_Surface,1>::Construct )
,		SchemaEntry("STEPDerived_Unit_Element",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDescription_Attribute",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDescriptive_Representation_Item",&STEP::ObjectHelper<STEPDescriptive_Representation_Item,1>::Construct )
,		SchemaEntry("STEPProduct_Definition_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDesign_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDesign_Make_From_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDiameter_Dimension",&STEP::ObjectHelper<STEPDiameter_Dimension,0>::Construct )
,		SchemaEntry("STEPRatio_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDielectric_Constant_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Callout",&STEP::ObjectHelper<STEPDimension_Callout,0>::Construct )
,		SchemaEntry("STEPDraughting_Callout_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Callout_Component_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Callout_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Curve",&STEP::ObjectHelper<STEPDimension_Curve,0>::Construct )
,		SchemaEntry("STEPTerminator_Symbol",&STEP::ObjectHelper<STEPTerminator_Symbol,1>::Construct )
,		SchemaEntry("STEPDimension_Curve_Terminator",&STEP::ObjectHelper<STEPDimension_Curve_Terminator,1>::Construct )
,		SchemaEntry("STEPDimension_Curve_Terminator_To_Projection_Curve_Associativity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Pair",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Related_Tolerance_Zone_Element",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimension_Text_Associativity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Characteristic_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Exponents",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Location_With_Path",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDimensional_Size_With_Path",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExecuted_Action",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDirected_Action",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDirected_Dimensional_Location",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDirection",&STEP::ObjectHelper<STEPDirection,1>::Construct )
,		SchemaEntry("STEPDocument",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_File",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Identifier",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Identifier_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Product_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Product_Equivalence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Representation_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Usage_Constraint",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDocument_Usage_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDose_Equivalent_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDose_Equivalent_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDouble_Offset_Shelled_Solid",&STEP::ObjectHelper<STEPDouble_Offset_Shelled_Solid,1>::Construct )
,		SchemaEntry("STEPItem_Defined_Transformation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTransformation_With_Derived_Angle",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraped_Defined_Transformation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Annotation_Occurrence",&STEP::ObjectHelper<STEPDraughting_Annotation_Occurrence,0>::Construct )
,		SchemaEntry("STEPDraughting_Elements",&STEP::ObjectHelper<STEPDraughting_Elements,0>::Construct )
,		SchemaEntry("STEPDraughting_Model",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPItem_Identified_Representation_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Model_Item_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Pre_Defined_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Curve_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Pre_Defined_Curve_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Text_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Pre_Defined_Text_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Subfigure_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDraughting_Symbol_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Literal",&STEP::ObjectHelper<STEPText_Literal,5>::Construct )
,		SchemaEntry("STEPText_Literal_With_Delineation",&STEP::ObjectHelper<STEPText_Literal_With_Delineation,1>::Construct )
,		SchemaEntry("STEPDraughting_Text_Literal_With_Delineation",&STEP::ObjectHelper<STEPDraughting_Text_Literal_With_Delineation,0>::Construct )
,		SchemaEntry("STEPDraughting_Title",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_Set",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Revision",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Revision_Sequence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_Area",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Sheet_Revision",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Sheet_Revision_Sequence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPDrawing_Sheet_Revision_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEdge",&STEP::ObjectHelper<STEPEdge,2>::Construct )
,		SchemaEntry("STEPEdge_Based_Wireframe_Model",&STEP::ObjectHelper<STEPEdge_Based_Wireframe_Model,1>::Construct )
,		SchemaEntry("STEPEdge_Based_Wireframe_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEdge_Blended_Solid",&STEP::ObjectHelper<STEPEdge_Blended_Solid,1>::Construct )
,		SchemaEntry("STEPEdge_Curve",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEdge_Loop",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEffectivity_Context_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEffectivity_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Charge_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Charge_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Current_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Current_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Potential_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElectric_Potential_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPElementary_Brep_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEllipse",&STEP::ObjectHelper<STEPEllipse,2>::Construct )
,		SchemaEntry("STEPEnergy_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEnergy_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProperty_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFact_Type",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEntity_Assertion",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEnum_Reference_Prefix",&STEP::ObjectHelper<STEPEnum_Reference_Prefix,0>::Construct )
,		SchemaEntry("STEPEnvironment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvaluated_Characteristic",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvaluated_Degenerate_Pcurve",&STEP::ObjectHelper<STEPEvaluated_Degenerate_Pcurve,1>::Construct )
,		SchemaEntry("STEPEvaluation_Product_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvent_Occurrence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvent_Occurrence_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPEvent_Occurrence_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Feature_Category",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExclusive_Product_Concept_Feature_Category",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUncertainty_Qualifier",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPStandard_Uncertainty",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExpanded_Uncertainty",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRepresentation_Item_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExplicit_Procedural_Representation_Item_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExplicit_Procedural_Geometric_Representation_Item_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExplicit_Procedural_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExplicit_Procedural_Shape_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExpression_Conversion_Based_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExtension",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExtent",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternal_Source",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternal_Class_Library",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternal_Source_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Class",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Context_Dependent_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Conversion_Based_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Currency",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Curve_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Dimension_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_General_Property",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Hatch_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Item_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Marker",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPicture_Representation_Item",&STEP::ObjectHelper<STEPPicture_Representation_Item,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Picture_Representation_Item",&STEP::ObjectHelper<STEPExternally_Defined_Picture_Representation_Item,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_String",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Terminator_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Text_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Tile",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPExternally_Defined_Tile_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSwept_Area_Solid",&STEP::ObjectHelper<STEPSwept_Area_Solid,1>::Construct )
,		SchemaEntry("STEPExtruded_Area_Solid",&STEP::ObjectHelper<STEPExtruded_Area_Solid,2>::Construct )
,		SchemaEntry("STEPSwept_Face_Solid",&STEP::ObjectHelper<STEPSwept_Face_Solid,1>::Construct )
,		SchemaEntry("STEPExtruded_Face_Solid",&STEP::ObjectHelper<STEPExtruded_Face_Solid,2>::Construct )
,		SchemaEntry("STEPExtruded_Face_Solid_With_Trim_Conditions",&STEP::ObjectHelper<STEPExtruded_Face_Solid_With_Trim_Conditions,6>::Construct )
,		SchemaEntry("STEPExtruded_Face_Solid_With_Draft_Angle",&STEP::ObjectHelper<STEPExtruded_Face_Solid_With_Draft_Angle,1>::Construct )
,		SchemaEntry("STEPExtruded_Face_Solid_With_Multiple_Draft_Angles",&STEP::ObjectHelper<STEPExtruded_Face_Solid_With_Multiple_Draft_Angles,1>::Construct )
,		SchemaEntry("STEPFace",&STEP::ObjectHelper<STEPFace,1>::Construct )
,		SchemaEntry("STEPFace_Based_Surface_Model",&STEP::ObjectHelper<STEPFace_Based_Surface_Model,1>::Construct )
,		SchemaEntry("STEPFace_Bound",&STEP::ObjectHelper<STEPFace_Bound,2>::Construct )
,		SchemaEntry("STEPFace_Outer_Bound",&STEP::ObjectHelper<STEPFace_Outer_Bound,0>::Construct )
,		SchemaEntry("STEPFaceted_Brep",&STEP::ObjectHelper<STEPFaceted_Brep,0>::Construct )
,		SchemaEntry("STEPFaceted_Brep_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFill_Area_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Hatching",&STEP::ObjectHelper<STEPFill_Area_Style_Hatching,5>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Tile_Coloured_Region",&STEP::ObjectHelper<STEPFill_Area_Style_Tile_Coloured_Region,2>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Tile_Curve_With_Style",&STEP::ObjectHelper<STEPFill_Area_Style_Tile_Curve_With_Style,1>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Tile_Symbol_With_Style",&STEP::ObjectHelper<STEPFill_Area_Style_Tile_Symbol_With_Style,1>::Construct )
,		SchemaEntry("STEPFill_Area_Style_Tiles",&STEP::ObjectHelper<STEPFill_Area_Style_Tiles,3>::Construct )
,		SchemaEntry("STEPShape_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFlat_Pattern_Ply_Representation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFlatness_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPForce_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPForce_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPForward_Chaining_Rule",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPForward_Chaining_Rule_Premise",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFrequency_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFrequency_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFunc",&STEP::ObjectHelper<STEPFunc,0>::Construct )
,		SchemaEntry("STEPFunctional_Breakdown_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFunctional_Element_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPFunctionally_Defined_Transformation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneral_Material_Property",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneral_Property_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSimple_Generic_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneric_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeneric_Variable",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Alignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Set",&STEP::ObjectHelper<STEPGeometric_Set,1>::Construct )
,		SchemaEntry("STEPGeometric_Curve_Set",&STEP::ObjectHelper<STEPGeometric_Curve_Set,0>::Construct )
,		SchemaEntry("STEPGeometric_Intersection",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Item_Specific_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Model_Element_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRepresentation_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Representation_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Tolerance_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometric_Tolerance_With_Defined_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometrical_Tolerance_Callout",&STEP::ObjectHelper<STEPGeometrical_Tolerance_Callout,0>::Construct )
,		SchemaEntry("STEPGeometrically_Bounded_2d_Wireframe_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometrically_Bounded_Surface_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGeometrically_Bounded_Wireframe_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGlobal_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGlobal_Uncertainty_Assigned_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGlobal_Unit_Assigned_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPGround_Fact",&STEP::ObjectHelper<STEPGround_Fact,0>::Construct )
,		SchemaEntry("STEPGroup_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPHardness_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPHidden_Element_Over_Riding_Styled_Item",&STEP::ObjectHelper<STEPHidden_Element_Over_Riding_Styled_Item,0>::Construct )
,		SchemaEntry("STEPHyperbola",&STEP::ObjectHelper<STEPHyperbola,2>::Construct )
,		SchemaEntry("STEPId_Attribute",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIdentification_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIlluminance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIlluminance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIncluded_Text_Block",&STEP::ObjectHelper<STEPIncluded_Text_Block,0>::Construct )
,		SchemaEntry("STEPInclusion_Product_Concept_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUser_Selected_Elements",&STEP::ObjectHelper<STEPUser_Selected_Elements,1>::Construct )
,		SchemaEntry("STEPIndirectly_Selected_Elements",&STEP::ObjectHelper<STEPIndirectly_Selected_Elements,1>::Construct )
,		SchemaEntry("STEPIndirectly_Selected_Shape_Elements",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInductance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInductance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInformation_Right",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInformation_Usage_Right",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInstance_Usage_Context_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInstanced_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLiteral_Number",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInt_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPInteger_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Curve",&STEP::ObjectHelper<STEPSurface_Curve,3>::Construct )
,		SchemaEntry("STEPIntersection_Curve",&STEP::ObjectHelper<STEPIntersection_Curve,0>::Construct )
,		SchemaEntry("STEPInterval_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPIso4217_Currency",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPKnown_Source",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLaid_Defined_Transformation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLanguage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLeader_Curve",&STEP::ObjectHelper<STEPLeader_Curve,0>::Construct )
,		SchemaEntry("STEPLeader_Directed_Callout",&STEP::ObjectHelper<STEPLeader_Directed_Callout,0>::Construct )
,		SchemaEntry("STEPLeader_Directed_Dimension",&STEP::ObjectHelper<STEPLeader_Directed_Dimension,0>::Construct )
,		SchemaEntry("STEPLeader_Terminator",&STEP::ObjectHelper<STEPLeader_Terminator,0>::Construct )
,		SchemaEntry("STEPLength_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLength_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLight_Source",&STEP::ObjectHelper<STEPLight_Source,1>::Construct )
,		SchemaEntry("STEPLight_Source_Ambient",&STEP::ObjectHelper<STEPLight_Source_Ambient,0>::Construct )
,		SchemaEntry("STEPLight_Source_Directional",&STEP::ObjectHelper<STEPLight_Source_Directional,1>::Construct )
,		SchemaEntry("STEPLight_Source_Positional",&STEP::ObjectHelper<STEPLight_Source_Positional,3>::Construct )
,		SchemaEntry("STEPLight_Source_Spot",&STEP::ObjectHelper<STEPLight_Source_Spot,6>::Construct )
,		SchemaEntry("STEPLimits_And_Fits",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLine",&STEP::ObjectHelper<STEPLine,2>::Construct )
,		SchemaEntry("STEPLine_Profile_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLinear_Dimension",&STEP::ObjectHelper<STEPLinear_Dimension,0>::Construct )
,		SchemaEntry("STEPSimple_Clause",&STEP::ObjectHelper<STEPSimple_Clause,0>::Construct )
,		SchemaEntry("STEPLiteral_Conjunction",&STEP::ObjectHelper<STEPLiteral_Conjunction,0>::Construct )
,		SchemaEntry("STEPLiteral_Disjunction",&STEP::ObjectHelper<STEPLiteral_Disjunction,0>::Construct )
,		SchemaEntry("STEPLocal_Time",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLogical_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLogical_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLoop",&STEP::ObjectHelper<STEPLoop,0>::Construct )
,		SchemaEntry("STEPLoss_Tangent_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLot_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLuminous_Flux_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLuminous_Flux_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLuminous_Intensity_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPLuminous_Intensity_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMagnetic_Flux_Density_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMagnetic_Flux_Density_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMagnetic_Flux_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMagnetic_Flux_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMake_From_Usage_Option",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPManifold_Subsurface_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPManifold_Surface_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMass_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMass_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMaterial_Designation_Characterization",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMaterial_Property",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProperty_Definition_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMaterial_Property_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMeasure_Qualification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMeasure_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_And_Draughting_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_Geometric_Presentation_Area",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_Geometric_Presentation_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_Presentation_Representation_With_Draughting",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_Shaded_Presentation_Area",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMechanical_Design_Shaded_Presentation_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMin_And_Major_Ply_Orientation_Basis",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPModified_Geometric_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPModified_Solid_With_Placed_Configuration",&STEP::ObjectHelper<STEPModified_Solid_With_Placed_Configuration,1>::Construct )
,		SchemaEntry("STEPMoments_Of_Inertia_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMulti_Language_Attribute_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMultiple_Arity_Boolean_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMultiple_Arity_Generic_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPMultiple_Arity_Numeric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPName_Attribute",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPNext_Assembly_Usage_Occurrence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPNon_Manifold_Surface_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPNull_Representation_Item",&STEP::ObjectHelper<STEPNull_Representation_Item,0>::Construct )
,		SchemaEntry("STEPNumeric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPObject_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOffset_Curve_2d",&STEP::ObjectHelper<STEPOffset_Curve_2d,3>::Construct )
,		SchemaEntry("STEPOffset_Curve_3d",&STEP::ObjectHelper<STEPOffset_Curve_3d,4>::Construct )
,		SchemaEntry("STEPOffset_Surface",&STEP::ObjectHelper<STEPOffset_Surface,3>::Construct )
,		SchemaEntry("STEPOne_Direction_Repeat_Factor",&STEP::ObjectHelper<STEPOne_Direction_Repeat_Factor,1>::Construct )
,		SchemaEntry("STEPOpen_Shell",&STEP::ObjectHelper<STEPOpen_Shell,0>::Construct )
,		SchemaEntry("STEPOrdinal_Date",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProjection_Directed_Callout",&STEP::ObjectHelper<STEPProjection_Directed_Callout,0>::Construct )
,		SchemaEntry("STEPOrdinate_Dimension",&STEP::ObjectHelper<STEPOrdinate_Dimension,0>::Construct )
,		SchemaEntry("STEPOrganization",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganization_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganization_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganizational_Address",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganizational_Project",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganizational_Project_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOrganizational_Project_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPOriented_Closed_Shell",&STEP::ObjectHelper<STEPOriented_Closed_Shell,2>::Construct )
,		SchemaEntry("STEPOriented_Edge",&STEP::ObjectHelper<STEPOriented_Edge,2>::Construct )
,		SchemaEntry("STEPOriented_Face",&STEP::ObjectHelper<STEPOriented_Face,2>::Construct )
,		SchemaEntry("STEPOriented_Open_Shell",&STEP::ObjectHelper<STEPOriented_Open_Shell,2>::Construct )
,		SchemaEntry("STEPPath",&STEP::ObjectHelper<STEPPath,1>::Construct )
,		SchemaEntry("STEPOriented_Path",&STEP::ObjectHelper<STEPOriented_Path,2>::Construct )
,		SchemaEntry("STEPOriented_Surface",&STEP::ObjectHelper<STEPOriented_Surface,1>::Construct )
,		SchemaEntry("STEPOuter_Boundary_Curve",&STEP::ObjectHelper<STEPOuter_Boundary_Curve,0>::Construct )
,		SchemaEntry("STEPPackage_Product_Concept_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPParabola",&STEP::ObjectHelper<STEPParabola,1>::Construct )
,		SchemaEntry("STEPParallel_Offset",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPParallelism_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPParametric_Representation_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPartial_Document_With_Structured_Text_Representation_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPcurve",&STEP::ObjectHelper<STEPPcurve,2>::Construct )
,		SchemaEntry("STEPPercentage_Laminate_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPZone_Structural_Makeup",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPercentage_Laminate_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPercentage_Ply_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerpendicular_To",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerpendicularity_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerson",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerson_And_Organization",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerson_And_Organization_Address",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPerson_And_Organization_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPersonal_Address",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPhysical_Breakdown_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPhysical_Element_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_View",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPicture_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlaced_Datum_Target_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlaced_Feature",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlanar_Extent",&STEP::ObjectHelper<STEPPlanar_Extent,2>::Construct )
,		SchemaEntry("STEPPlanar_Box",&STEP::ObjectHelper<STEPPlanar_Box,1>::Construct )
,		SchemaEntry("STEPPlane",&STEP::ObjectHelper<STEPPlane,0>::Construct )
,		SchemaEntry("STEPPlane_Angle_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlane_Angle_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPlus_Minus_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPly_Laminate_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPly_Laminate_Sequence_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPly_Laminate_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPoint_And_Vector",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPoint_On_Curve",&STEP::ObjectHelper<STEPPoint_On_Curve,2>::Construct )
,		SchemaEntry("STEPPoint_On_Surface",&STEP::ObjectHelper<STEPPoint_On_Surface,3>::Construct )
,		SchemaEntry("STEPPoint_Path",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPoint_Replica",&STEP::ObjectHelper<STEPPoint_Replica,2>::Construct )
,		SchemaEntry("STEPPoint_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPolar_Complex_Number_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPoly_Loop",&STEP::ObjectHelper<STEPPoly_Loop,1>::Construct )
,		SchemaEntry("STEPPolyline",&STEP::ObjectHelper<STEPPolyline,1>::Construct )
,		SchemaEntry("STEPPosition_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPositioned_Sketch",&STEP::ObjectHelper<STEPPositioned_Sketch,2>::Construct )
,		SchemaEntry("STEPPower_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPower_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Dimension_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Geometrical_Tolerance_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Marker",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Point_Marker_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Surface_Condition_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Surface_Side_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Terminator_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPre_Defined_Tile",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPrecision_Qualifier",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPredefined_Picture_Representation_Item",&STEP::ObjectHelper<STEPPredefined_Picture_Representation_Item,0>::Construct )
,		SchemaEntry("STEPPresentation_Layer_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_Size",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPresentation_Style_Assignment",&STEP::ObjectHelper<STEPPresentation_Style_Assignment,1>::Construct )
,		SchemaEntry("STEPPresentation_Style_By_Context",&STEP::ObjectHelper<STEPPresentation_Style_By_Context,1>::Construct )
,		SchemaEntry("STEPPresented_Item_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPressure_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPPressure_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProcedural_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProcedural_Representation_Sequence",&STEP::ObjectHelper<STEPProcedural_Representation_Sequence,3>::Construct )
,		SchemaEntry("STEPProcedural_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProcedural_Shape_Representation_Sequence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Category",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Class",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Context",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Feature_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Feature_Category_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Concept_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Context_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Context_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Element_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Formation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Formation_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Formation_With_Specified_Source",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Group_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Occurrence_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Shape",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_Substitute",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Definition_With_Associated_Documents",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Identification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Material_Composition_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Related_Product_Category",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProduct_Specification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTolerance_Zone_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProjected_Zone_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProjection_Curve",&STEP::ObjectHelper<STEPProjection_Curve,0>::Construct )
,		SchemaEntry("STEPPromissory_Usage_Occurrence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPProperty_Definition_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPQualified_Representation_Item",&STEP::ObjectHelper<STEPQualified_Representation_Item,1>::Construct )
,		SchemaEntry("STEPQualitative_Uncertainty",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPQuantified_Assembly_Component_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPQuasi_Uniform_Curve",&STEP::ObjectHelper<STEPQuasi_Uniform_Curve,0>::Construct )
,		SchemaEntry("STEPQuasi_Uniform_Surface",&STEP::ObjectHelper<STEPQuasi_Uniform_Surface,0>::Construct )
,		SchemaEntry("STEPRadioactivity_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRadioactivity_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRadius_Dimension",&STEP::ObjectHelper<STEPRadius_Dimension,0>::Construct )
,		SchemaEntry("STEPRange_Characteristic",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRatio_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRational_B_Spline_Curve",&STEP::ObjectHelper<STEPRational_B_Spline_Curve,1>::Construct )
,		SchemaEntry("STEPRational_B_Spline_Surface",&STEP::ObjectHelper<STEPRational_B_Spline_Surface,0>::Construct )
,		SchemaEntry("STEPRational_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPReal_Literal",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPReal_Representation_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRectangular_Composite_Surface",&STEP::ObjectHelper<STEPRectangular_Composite_Surface,0>::Construct )
,		SchemaEntry("STEPRectangular_Trimmed_Surface",&STEP::ObjectHelper<STEPRectangular_Trimmed_Surface,7>::Construct )
,		SchemaEntry("STEPReferenced_Modified_Datum",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRelative_Event_Occurrence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRep_Item_Group",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPReparametrised_Composite_Curve_Segment",&STEP::ObjectHelper<STEPReparametrised_Composite_Curve_Segment,1>::Construct )
,		SchemaEntry("STEPRepresentation_Relationship_With_Transformation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRequirement_Assigned_Object",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRequirement_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRequirement_Source",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRequirement_View_Definition_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPResistance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPResistance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRevolved_Area_Solid",&STEP::ObjectHelper<STEPRevolved_Area_Solid,2>::Construct )
,		SchemaEntry("STEPRevolved_Face_Solid",&STEP::ObjectHelper<STEPRevolved_Face_Solid,2>::Construct )
,		SchemaEntry("STEPRevolved_Face_Solid_With_Trim_Conditions",&STEP::ObjectHelper<STEPRevolved_Face_Solid_With_Trim_Conditions,2>::Construct )
,		SchemaEntry("STEPRight_Angular_Wedge",&STEP::ObjectHelper<STEPRight_Angular_Wedge,5>::Construct )
,		SchemaEntry("STEPRight_Circular_Cone",&STEP::ObjectHelper<STEPRight_Circular_Cone,4>::Construct )
,		SchemaEntry("STEPRight_Circular_Cylinder",&STEP::ObjectHelper<STEPRight_Circular_Cylinder,3>::Construct )
,		SchemaEntry("STEPRight_To_Usage_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRole_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRoundness_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRow_Representation_Item",&STEP::ObjectHelper<STEPRow_Representation_Item,0>::Construct )
,		SchemaEntry("STEPRow_Value",&STEP::ObjectHelper<STEPRow_Value,0>::Construct )
,		SchemaEntry("STEPRow_Variable",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Action",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Condition",&STEP::ObjectHelper<STEPRule_Condition,0>::Construct )
,		SchemaEntry("STEPRule_Set",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Set_Group",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Superseded_Assignment",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRule_Supersedence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Curve_Swept_Area_Solid",&STEP::ObjectHelper<STEPSurface_Curve_Swept_Area_Solid,4>::Construct )
,		SchemaEntry("STEPRuled_Surface_Swept_Area_Solid",&STEP::ObjectHelper<STEPRuled_Surface_Swept_Area_Solid,0>::Construct )
,		SchemaEntry("STEPRunout_Zone_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRunout_Zone_Orientation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPRunout_Zone_Orientation_Reference_Direction",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSatisfied_Requirement",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSatisfies_Requirement",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSatisfying_Item",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPScalar_Variable",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPScattering_Parameter",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSculptured_Solid",&STEP::ObjectHelper<STEPSculptured_Solid,2>::Construct )
,		SchemaEntry("STEPSeam_Curve",&STEP::ObjectHelper<STEPSeam_Curve,0>::Construct )
,		SchemaEntry("STEPSecurity_Classification",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSecurity_Classification_Level",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSerial_Numbered_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Aspect_Associativity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Aspect_Deriving_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Definition_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Dimension_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Feature_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShape_Representation_With_Parameters",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPShell_Based_Surface_Model",&STEP::ObjectHelper<STEPShell_Based_Surface_Model,1>::Construct )
,		SchemaEntry("STEPShell_Based_Wireframe_Model",&STEP::ObjectHelper<STEPShell_Based_Wireframe_Model,1>::Construct )
,		SchemaEntry("STEPShell_Based_Wireframe_Shape_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Absorbed_Dose_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Capacitance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Conductance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Dose_Equivalent_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Electric_Charge_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Electric_Potential_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Energy_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Force_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Frequency_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Illuminance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Inductance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Magnetic_Flux_Density_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Magnetic_Flux_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Power_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Pressure_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Radioactivity_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Resistance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSi_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSimple_Boolean_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSimple_Numeric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSlash_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSmeared_Material_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSolid_Angle_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSolid_Angle_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSolid_Curve_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSolid_Replica",&STEP::ObjectHelper<STEPSolid_Replica,2>::Construct )
,		SchemaEntry("STEPSolid_With_Chamfered_Edges",&STEP::ObjectHelper<STEPSolid_With_Chamfered_Edges,0>::Construct )
,		SchemaEntry("STEPSolid_With_Angle_Based_Chamfer",&STEP::ObjectHelper<STEPSolid_With_Angle_Based_Chamfer,3>::Construct )
,		SchemaEntry("STEPSolid_With_Shape_Element_Pattern",&STEP::ObjectHelper<STEPSolid_With_Shape_Element_Pattern,1>::Construct )
,		SchemaEntry("STEPSolid_With_Circular_Pattern",&STEP::ObjectHelper<STEPSolid_With_Circular_Pattern,4>::Construct )
,		SchemaEntry("STEPSolid_With_Depression",&STEP::ObjectHelper<STEPSolid_With_Depression,1>::Construct )
,		SchemaEntry("STEPSolid_With_Pocket",&STEP::ObjectHelper<STEPSolid_With_Pocket,2>::Construct )
,		SchemaEntry("STEPSolid_With_Circular_Pocket",&STEP::ObjectHelper<STEPSolid_With_Circular_Pocket,1>::Construct )
,		SchemaEntry("STEPSolid_With_Protrusion",&STEP::ObjectHelper<STEPSolid_With_Protrusion,2>::Construct )
,		SchemaEntry("STEPSolid_With_Circular_Protrusion",&STEP::ObjectHelper<STEPSolid_With_Circular_Protrusion,1>::Construct )
,		SchemaEntry("STEPSolid_With_Hole",&STEP::ObjectHelper<STEPSolid_With_Hole,0>::Construct )
,		SchemaEntry("STEPSolid_With_Stepped_Round_Hole",&STEP::ObjectHelper<STEPSolid_With_Stepped_Round_Hole,1>::Construct )
,		SchemaEntry("STEPSolid_With_Conical_Bottom_Round_Hole",&STEP::ObjectHelper<STEPSolid_With_Conical_Bottom_Round_Hole,2>::Construct )
,		SchemaEntry("STEPSolid_With_Constant_Radius_Edge_Blend",&STEP::ObjectHelper<STEPSolid_With_Constant_Radius_Edge_Blend,1>::Construct )
,		SchemaEntry("STEPSolid_With_Slot",&STEP::ObjectHelper<STEPSolid_With_Slot,2>::Construct )
,		SchemaEntry("STEPSolid_With_Curved_Slot",&STEP::ObjectHelper<STEPSolid_With_Curved_Slot,1>::Construct )
,		SchemaEntry("STEPSolid_With_Double_Offset_Chamfer",&STEP::ObjectHelper<STEPSolid_With_Double_Offset_Chamfer,2>::Construct )
,		SchemaEntry("STEPSolid_With_Flat_Bottom_Round_Hole",&STEP::ObjectHelper<STEPSolid_With_Flat_Bottom_Round_Hole,1>::Construct )
,		SchemaEntry("STEPSolid_With_General_Pocket",&STEP::ObjectHelper<STEPSolid_With_General_Pocket,2>::Construct )
,		SchemaEntry("STEPSolid_With_General_Protrusion",&STEP::ObjectHelper<STEPSolid_With_General_Protrusion,2>::Construct )
,		SchemaEntry("STEPSolid_With_Groove",&STEP::ObjectHelper<STEPSolid_With_Groove,5>::Construct )
,		SchemaEntry("STEPSolid_With_Incomplete_Circular_Pattern",&STEP::ObjectHelper<STEPSolid_With_Incomplete_Circular_Pattern,1>::Construct )
,		SchemaEntry("STEPSolid_With_Rectangular_Pattern",&STEP::ObjectHelper<STEPSolid_With_Rectangular_Pattern,4>::Construct )
,		SchemaEntry("STEPSolid_With_Incomplete_Rectangular_Pattern",&STEP::ObjectHelper<STEPSolid_With_Incomplete_Rectangular_Pattern,0>::Construct )
,		SchemaEntry("STEPSolid_With_Rectangular_Pocket",&STEP::ObjectHelper<STEPSolid_With_Rectangular_Pocket,3>::Construct )
,		SchemaEntry("STEPSolid_With_Rectangular_Protrusion",&STEP::ObjectHelper<STEPSolid_With_Rectangular_Protrusion,3>::Construct )
,		SchemaEntry("STEPSolid_With_Single_Offset_Chamfer",&STEP::ObjectHelper<STEPSolid_With_Single_Offset_Chamfer,1>::Construct )
,		SchemaEntry("STEPSolid_With_Spherical_Bottom_Round_Hole",&STEP::ObjectHelper<STEPSolid_With_Spherical_Bottom_Round_Hole,1>::Construct )
,		SchemaEntry("STEPSolid_With_Stepped_Round_Hole_And_Conical_Transitions",&STEP::ObjectHelper<STEPSolid_With_Stepped_Round_Hole_And_Conical_Transitions,1>::Construct )
,		SchemaEntry("STEPSolid_With_Straight_Slot",&STEP::ObjectHelper<STEPSolid_With_Straight_Slot,1>::Construct )
,		SchemaEntry("STEPSolid_With_Tee_Section_Slot",&STEP::ObjectHelper<STEPSolid_With_Tee_Section_Slot,2>::Construct )
,		SchemaEntry("STEPSolid_With_Through_Depression",&STEP::ObjectHelper<STEPSolid_With_Through_Depression,1>::Construct )
,		SchemaEntry("STEPSolid_With_Trapezoidal_Section_Slot",&STEP::ObjectHelper<STEPSolid_With_Trapezoidal_Section_Slot,2>::Construct )
,		SchemaEntry("STEPSolid_With_Variable_Radius_Edge_Blend",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSource_For_Requirement",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSourced_Requirement",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSpecification_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSpecified_Higher_Usage_Occurrence",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSphere",&STEP::ObjectHelper<STEPSphere,2>::Construct )
,		SchemaEntry("STEPSpherical_Surface",&STEP::ObjectHelper<STEPSpherical_Surface,1>::Construct )
,		SchemaEntry("STEPStart_Request",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPStart_Work",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPStraightness_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPStructured_Dimension_Callout",&STEP::ObjectHelper<STEPStructured_Dimension_Callout,0>::Construct )
,		SchemaEntry("STEPStructured_Text_Composition",&STEP::ObjectHelper<STEPStructured_Text_Composition,0>::Construct )
,		SchemaEntry("STEPStructured_Text_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSubedge",&STEP::ObjectHelper<STEPSubedge,1>::Construct )
,		SchemaEntry("STEPSubface",&STEP::ObjectHelper<STEPSubface,1>::Construct )
,		SchemaEntry("STEPSupplied_Part_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Condition_Callout",&STEP::ObjectHelper<STEPSurface_Condition_Callout,0>::Construct )
,		SchemaEntry("STEPSwept_Surface",&STEP::ObjectHelper<STEPSwept_Surface,1>::Construct )
,		SchemaEntry("STEPSurface_Of_Linear_Extrusion",&STEP::ObjectHelper<STEPSurface_Of_Linear_Extrusion,1>::Construct )
,		SchemaEntry("STEPSurface_Of_Revolution",&STEP::ObjectHelper<STEPSurface_Of_Revolution,1>::Construct )
,		SchemaEntry("STEPSurface_Patch",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Profile_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Rendering_Properties",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Replica",&STEP::ObjectHelper<STEPSurface_Replica,2>::Construct )
,		SchemaEntry("STEPSurface_Side_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Boundary",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Control_Grid",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Fill_Area",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Parameter_Line",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Reflectance_Ambient",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Reflectance_Ambient_Diffuse",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Reflectance_Ambient_Diffuse_Specular",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Rendering",&STEP::ObjectHelper<STEPSurface_Style_Rendering,2>::Construct )
,		SchemaEntry("STEPSurface_Style_Rendering_With_Properties",&STEP::ObjectHelper<STEPSurface_Style_Rendering_With_Properties,1>::Construct )
,		SchemaEntry("STEPSurface_Style_Segmentation_Curve",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Silhouette",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Transparent",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Style_Usage",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurface_Texture_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSurfaced_Open_Shell",&STEP::ObjectHelper<STEPSurfaced_Open_Shell,0>::Construct )
,		SchemaEntry("STEPSwept_Disk_Solid",&STEP::ObjectHelper<STEPSwept_Disk_Solid,5>::Construct )
,		SchemaEntry("STEPSymbol",&STEP::ObjectHelper<STEPSymbol,0>::Construct )
,		SchemaEntry("STEPSymbol_Colour",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSymbol_Representation_Map",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSymbol_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSymbol_Target",&STEP::ObjectHelper<STEPSymbol_Target,3>::Construct )
,		SchemaEntry("STEPSymmetric_Shape_Aspect",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPSymmetry_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTable_Representation_Item",&STEP::ObjectHelper<STEPTable_Representation_Item,0>::Construct )
,		SchemaEntry("STEPTactile_Appearance_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTagged_Text_Format",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTagged_Text_Item",&STEP::ObjectHelper<STEPTagged_Text_Item,0>::Construct )
,		SchemaEntry("STEPTangent",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Font_Family",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Font_In_Family",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Literal_With_Associated_Curves",&STEP::ObjectHelper<STEPText_Literal_With_Associated_Curves,1>::Construct )
,		SchemaEntry("STEPText_Literal_With_Blanking_Box",&STEP::ObjectHelper<STEPText_Literal_With_Blanking_Box,1>::Construct )
,		SchemaEntry("STEPText_Literal_With_Extent",&STEP::ObjectHelper<STEPText_Literal_With_Extent,1>::Construct )
,		SchemaEntry("STEPText_String_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Style_For_Defined_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Style_With_Box_Characteristics",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Style_With_Mirror",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPText_Style_With_Spacing",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThermal_Resistance_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThermal_Resistance_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThermodynamic_Temperature_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThermodynamic_Temperature_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThickened_Face_Solid",&STEP::ObjectHelper<STEPThickened_Face_Solid,3>::Construct )
,		SchemaEntry("STEPThickness_Laminate_Definition",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPThickness_Laminate_Table",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval_Based_Effectivity",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval_Relationship",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval_Role",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Interval_With_Bounds",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTime_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTolerance_Value",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTolerance_Zone",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTolerance_Zone_Form",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTorus",&STEP::ObjectHelper<STEPTorus,3>::Construct )
,		SchemaEntry("STEPTotal_Runout_Tolerance",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPTrack_Blended_Solid",&STEP::ObjectHelper<STEPTrack_Blended_Solid,0>::Construct )
,		SchemaEntry("STEPTrack_Blended_Solid_With_End_Conditions",&STEP::ObjectHelper<STEPTrack_Blended_Solid_With_End_Conditions,1>::Construct )
,		SchemaEntry("STEPTrimmed_Curve",&STEP::ObjectHelper<STEPTrimmed_Curve,5>::Construct )
,		SchemaEntry("STEPTwo_Direction_Repeat_Factor",&STEP::ObjectHelper<STEPTwo_Direction_Repeat_Factor,1>::Construct )
,		SchemaEntry("STEPType_Qualifier",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUnary_Generic_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUnary_Numeric_Expression",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUncertainty_Assigned_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUncertainty_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUniform_Curve",&STEP::ObjectHelper<STEPUniform_Curve,0>::Construct )
,		SchemaEntry("STEPUniform_Resource_Identifier",&STEP::ObjectHelper<STEPUniform_Resource_Identifier,0>::Construct )
,		SchemaEntry("STEPUniform_Surface",&STEP::ObjectHelper<STEPUniform_Surface,0>::Construct )
,		SchemaEntry("STEPUsage_Association",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUser_Defined_Curve_Font",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUser_Defined_Marker",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUser_Defined_Terminator_Symbol",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPUser_Selected_Shape_Elements",&STEP::ObjectHelper<STEPUser_Selected_Shape_Elements,0>::Construct )
,		SchemaEntry("STEPValue_Range",&STEP::ObjectHelper<STEPValue_Range,0>::Construct )
,		SchemaEntry("STEPValue_Representation_Item",&STEP::ObjectHelper<STEPValue_Representation_Item,1>::Construct )
,		SchemaEntry("STEPVariable_Semantics",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVariational_Representation_Item",&STEP::ObjectHelper<STEPVariational_Representation_Item,0>::Construct )
,		SchemaEntry("STEPVector",&STEP::ObjectHelper<STEPVector,2>::Construct )
,		SchemaEntry("STEPVector_Style",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVelocity_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVelocity_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVersioned_Action_Request",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVertex",&STEP::ObjectHelper<STEPVertex,0>::Construct )
,		SchemaEntry("STEPVertex_Loop",&STEP::ObjectHelper<STEPVertex_Loop,1>::Construct )
,		SchemaEntry("STEPVertex_Point",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVertex_Shell",&STEP::ObjectHelper<STEPVertex_Shell,1>::Construct )
,		SchemaEntry("STEPView_Volume",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVisual_Appearance_Representation",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVolume_Measure_With_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPVolume_Unit",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPWeek_Of_Year_And_Day_Date",&STEP::ObjectHelper<NotImplemented,0>::Construct )
,		SchemaEntry("STEPWire_Shell",&STEP::ObjectHelper<STEPWire_Shell,1>::Construct )
,		SchemaEntry("STEPYear_Month",&STEP::ObjectHelper<NotImplemented,0>::Construct )

	};
}

// -----------------------------------------------------------------------------------------------------------
void STEP::GetSchema(EXPRESS::ConversionSchema& out)
{
	out = EXPRESS::ConversionSchema(schema_raw);
}

namespace STEP {

// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<NotImplemented>(const STEP::DB& db, const LIST& params, NotImplemented* in)
{
	return 0;
}



// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRepresentation_Item>(const DB& db, const LIST& params, STEPRepresentation_Item* in)
{
	size_t base = 0;
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPRepresentation_Item"); }    do { // convert the 'STEPName' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPRepresentation_Item,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->name, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 0 to STEPRepresentation_Item to be a `label`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPGeometric_Representation_Item>(const DB& db, const LIST& params, STEPGeometric_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPGeometric_Representation_Item"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDraughting_Callout>(const DB& db, const LIST& params, STEPDraughting_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDimension_Curve_Directed_Callout>(const DB& db, const LIST& params, STEPDimension_Curve_Directed_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAngular_Dimension>(const DB& db, const LIST& params, STEPAngular_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<dimension_curve_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPStyled_Item>(const DB& db, const LIST& params, STEPStyled_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPStyled_Item"); }    do { // convert the 'STEPStyles' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPStyled_Item,2>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->styles, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPStyled_Item to be a `SET [1:?] OF presentation_style_assignment`")); }
    } while(0);
    do { // convert the 'STEPItem' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPStyled_Item,2>::aux_is_derived[1]=true; break; }
        try { GenericConvert( in->item, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPStyled_Item to be a `representation_item`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<styled_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Curve_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Curve_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Fill_Area>(const DB& db, const LIST& params, STEPAnnotation_Fill_Area* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Fill_Area_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Fill_Area_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Symbol_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Symbol_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Subfigure_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Subfigure_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_symbol_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPMapped_Item>(const DB& db, const LIST& params, STEPMapped_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Symbol>(const DB& db, const LIST& params, STEPAnnotation_Symbol* in)
{
	size_t base = GenericFill(db,params,static_cast<mapped_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Text>(const DB& db, const LIST& params, STEPAnnotation_Text* in)
{
	size_t base = GenericFill(db,params,static_cast<mapped_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Text_Character>(const DB& db, const LIST& params, STEPAnnotation_Text_Character* in)
{
	size_t base = GenericFill(db,params,static_cast<mapped_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAnnotation_Text_Occurrence>(const DB& db, const LIST& params, STEPAnnotation_Text_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCompound_Representation_Item>(const DB& db, const LIST& params, STEPCompound_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAtomic_Formula>(const DB& db, const LIST& params, STEPAtomic_Formula* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPlacement>(const DB& db, const LIST& params, STEPPlacement* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAxis1_Placement>(const DB& db, const LIST& params, STEPAxis1_Placement* in)
{
	size_t base = GenericFill(db,params,static_cast<placement*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAxis2_Placement_2d>(const DB& db, const LIST& params, STEPAxis2_Placement_2d* in)
{
	size_t base = GenericFill(db,params,static_cast<placement*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPAxis2_Placement_3d>(const DB& db, const LIST& params, STEPAxis2_Placement_3d* in)
{
	size_t base = GenericFill(db,params,static_cast<placement*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCurve>(const DB& db, const LIST& params, STEPCurve* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPCurve"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBounded_Curve>(const DB& db, const LIST& params, STEPBounded_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPBounded_Curve"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPB_Spline_Curve>(const DB& db, const LIST& params, STEPB_Spline_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPB_Spline_Curve_With_Knots>(const DB& db, const LIST& params, STEPB_Spline_Curve_With_Knots* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface>(const DB& db, const LIST& params, STEPSurface* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBounded_Surface>(const DB& db, const LIST& params, STEPBounded_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPB_Spline_Surface>(const DB& db, const LIST& params, STEPB_Spline_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPB_Spline_Surface_With_Knots>(const DB& db, const LIST& params, STEPB_Spline_Surface_With_Knots* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBezier_Curve>(const DB& db, const LIST& params, STEPBezier_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBezier_Surface>(const DB& db, const LIST& params, STEPBezier_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBinary_Representation_Item>(const DB& db, const LIST& params, STEPBinary_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBlock>(const DB& db, const LIST& params, STEPBlock* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBoolean_Result>(const DB& db, const LIST& params, STEPBoolean_Result* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 4) { throw STEP::TypeError("expected 4 arguments to STEPBoolean_Result"); }    do { // convert the 'STEPOperator' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->operator, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPBoolean_Result to be a `boolean_operator`")); }
    } while(0);
    do { // convert the 'STEPFirst_Operand' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->first_operand, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPBoolean_Result to be a `boolean_operand`")); }
    } while(0);
    do { // convert the 'STEPSecond_Operand' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->second_operand, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPBoolean_Result to be a `boolean_operand`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Curve>(const DB& db, const LIST& params, STEPComposite_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_curve*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPComposite_Curve"); }    do { // convert the 'STEPSegments' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPComposite_Curve,2>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->segments, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPComposite_Curve to be a `LIST [1:?] OF composite_curve_segment`")); }
    } while(0);
    do { // convert the 'STEPSelf_Intersect' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPComposite_Curve,2>::aux_is_derived[1]=true; break; }
        try { GenericConvert( in->self_intersect, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPComposite_Curve to be a `LOGICAL`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Curve_On_Surface>(const DB& db, const LIST& params, STEPComposite_Curve_On_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBoundary_Curve>(const DB& db, const LIST& params, STEPBoundary_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_curve_on_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFounded_Item>(const DB& db, const LIST& params, STEPFounded_Item* in)
{
	size_t base = 0;
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPHalf_Space_Solid>(const DB& db, const LIST& params, STEPHalf_Space_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBoxed_Half_Space>(const DB& db, const LIST& params, STEPBoxed_Half_Space* in)
{
	size_t base = GenericFill(db,params,static_cast<half_space_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_Model>(const DB& db, const LIST& params, STEPSolid_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPSolid_Model"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPManifold_Solid_Brep>(const DB& db, const LIST& params, STEPManifold_Solid_Brep* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPManifold_Solid_Brep"); }    do { // convert the 'STEPOuter' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPManifold_Solid_Brep,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->outer, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPManifold_Solid_Brep to be a `closed_shell`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBrep_With_Voids>(const DB& db, const LIST& params, STEPBrep_With_Voids* in)
{
	size_t base = GenericFill(db,params,static_cast<manifold_solid_brep*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPBytes_Representation_Item>(const DB& db, const LIST& params, STEPBytes_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<binary_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Image>(const DB& db, const LIST& params, STEPCamera_Image* in)
{
	size_t base = GenericFill(db,params,static_cast<mapped_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Image_3d_With_Scale>(const DB& db, const LIST& params, STEPCamera_Image_3d_With_Scale* in)
{
	size_t base = GenericFill(db,params,static_cast<camera_image*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model>(const DB& db, const LIST& params, STEPCamera_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_D3>(const DB& db, const LIST& params, STEPCamera_Model_D3* in)
{
	size_t base = GenericFill(db,params,static_cast<camera_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_D3_Multi_Clipping>(const DB& db, const LIST& params, STEPCamera_Model_D3_Multi_Clipping* in)
{
	size_t base = GenericFill(db,params,static_cast<camera_model_d3*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_D3_Multi_Clipping_Intersection>(const DB& db, const LIST& params, STEPCamera_Model_D3_Multi_Clipping_Intersection* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_D3_Multi_Clipping_Union>(const DB& db, const LIST& params, STEPCamera_Model_D3_Multi_Clipping_Union* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_D3_With_Hlhsr>(const DB& db, const LIST& params, STEPCamera_Model_D3_With_Hlhsr* in)
{
	size_t base = GenericFill(db,params,static_cast<camera_model_d3*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCamera_Model_With_Light_Sources>(const DB& db, const LIST& params, STEPCamera_Model_With_Light_Sources* in)
{
	size_t base = GenericFill(db,params,static_cast<camera_model_d3*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPoint>(const DB& db, const LIST& params, STEPPoint* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPPoint"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCartesian_Point>(const DB& db, const LIST& params, STEPCartesian_Point* in)
{
	size_t base = GenericFill(db,params,static_cast<point*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPCartesian_Point"); }    do { // convert the 'STEPCoordinates' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->coordinates, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPCartesian_Point to be a `LIST [1:3] OF length_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConic>(const DB& db, const LIST& params, STEPConic* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPConic"); }    do { // convert the 'STEPPosition' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPConic,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->position, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPConic to be a `axis2_placement`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCircle>(const DB& db, const LIST& params, STEPCircle* in)
{
	size_t base = GenericFill(db,params,static_cast<conic*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPCircle"); }    do { // convert the 'STEPRadius' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->radius, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPCircle to be a `positive_length_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTopological_Representation_Item>(const DB& db, const LIST& params, STEPTopological_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPTopological_Representation_Item"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConnected_Face_Set>(const DB& db, const LIST& params, STEPConnected_Face_Set* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPConnected_Face_Set"); }    do { // convert the 'STEPCfs_Faces' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPConnected_Face_Set,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->cfs_faces, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPConnected_Face_Set to be a `SET [1:?] OF face`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPClosed_Shell>(const DB& db, const LIST& params, STEPClosed_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<connected_face_set*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComplex_Clause>(const DB& db, const LIST& params, STEPComplex_Clause* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComplex_Conjunctive_Clause>(const DB& db, const LIST& params, STEPComplex_Conjunctive_Clause* in)
{
	size_t base = GenericFill(db,params,static_cast<complex_clause*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComplex_Disjunctive_Clause>(const DB& db, const LIST& params, STEPComplex_Disjunctive_Clause* in)
{
	size_t base = GenericFill(db,params,static_cast<complex_clause*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPModified_Solid>(const DB& db, const LIST& params, STEPModified_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPShelled_Solid>(const DB& db, const LIST& params, STEPShelled_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComplex_Shelled_Solid>(const DB& db, const LIST& params, STEPComplex_Shelled_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<shelled_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Curve_Segment>(const DB& db, const LIST& params, STEPComposite_Curve_Segment* in)
{
	size_t base = GenericFill(db,params,static_cast<founded_item*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPComposite_Curve_Segment"); }    do { // convert the 'STEPTransition' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPComposite_Curve_Segment,3>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->transition, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 0 to STEPComposite_Curve_Segment to be a `transition_code`")); }
    } while(0);
    do { // convert the 'STEPSame_Sense' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPComposite_Curve_Segment,3>::aux_is_derived[1]=true; break; }
        try { GenericConvert( in->same_sense, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPComposite_Curve_Segment to be a `BOOLEAN`")); }
    } while(0);
    do { // convert the 'STEPParent_Curve' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPComposite_Curve_Segment,3>::aux_is_derived[2]=true; break; }
        try { GenericConvert( in->parent_curve, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPComposite_Curve_Segment to be a `curve`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Text>(const DB& db, const LIST& params, STEPComposite_Text* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Text_With_Associated_Curves>(const DB& db, const LIST& params, STEPComposite_Text_With_Associated_Curves* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_text*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Text_With_Blanking_Box>(const DB& db, const LIST& params, STEPComposite_Text_With_Blanking_Box* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_text*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Text_With_Delineation>(const DB& db, const LIST& params, STEPComposite_Text_With_Delineation* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_text*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPComposite_Text_With_Extent>(const DB& db, const LIST& params, STEPComposite_Text_With_Extent* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_text*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConical_Stepped_Hole_Transition>(const DB& db, const LIST& params, STEPConical_Stepped_Hole_Transition* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPElementary_Surface>(const DB& db, const LIST& params, STEPElementary_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConical_Surface>(const DB& db, const LIST& params, STEPConical_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<elementary_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConnected_Edge_Set>(const DB& db, const LIST& params, STEPConnected_Edge_Set* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPConnected_Face_Sub_Set>(const DB& db, const LIST& params, STEPConnected_Face_Sub_Set* in)
{
	size_t base = GenericFill(db,params,static_cast<connected_face_set*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOver_Riding_Styled_Item>(const DB& db, const LIST& params, STEPOver_Riding_Styled_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<styled_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPContext_Dependent_Over_Riding_Styled_Item>(const DB& db, const LIST& params, STEPContext_Dependent_Over_Riding_Styled_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<over_riding_styled_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCsg_Solid>(const DB& db, const LIST& params, STEPCsg_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCurve_Bounded_Surface>(const DB& db, const LIST& params, STEPCurve_Bounded_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCurve_Dimension>(const DB& db, const LIST& params, STEPCurve_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<dimension_curve_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCurve_Replica>(const DB& db, const LIST& params, STEPCurve_Replica* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPCylindrical_Surface>(const DB& db, const LIST& params, STEPCylindrical_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<elementary_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDatum_Feature_Callout>(const DB& db, const LIST& params, STEPDatum_Feature_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDatum_Target_Callout>(const DB& db, const LIST& params, STEPDatum_Target_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDefault_Tolerance_Table_Cell>(const DB& db, const LIST& params, STEPDefault_Tolerance_Table_Cell* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDefined_Symbol>(const DB& db, const LIST& params, STEPDefined_Symbol* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDegenerate_Pcurve>(const DB& db, const LIST& params, STEPDegenerate_Pcurve* in)
{
	size_t base = GenericFill(db,params,static_cast<point*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPToroidal_Surface>(const DB& db, const LIST& params, STEPToroidal_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<elementary_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDegenerate_Toroidal_Surface>(const DB& db, const LIST& params, STEPDegenerate_Toroidal_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<toroidal_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDescriptive_Representation_Item>(const DB& db, const LIST& params, STEPDescriptive_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDiameter_Dimension>(const DB& db, const LIST& params, STEPDiameter_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<dimension_curve_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDimension_Callout>(const DB& db, const LIST& params, STEPDimension_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDimension_Curve>(const DB& db, const LIST& params, STEPDimension_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_curve_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTerminator_Symbol>(const DB& db, const LIST& params, STEPTerminator_Symbol* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_symbol_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDimension_Curve_Terminator>(const DB& db, const LIST& params, STEPDimension_Curve_Terminator* in)
{
	size_t base = GenericFill(db,params,static_cast<terminator_symbol*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDirection>(const DB& db, const LIST& params, STEPDirection* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDouble_Offset_Shelled_Solid>(const DB& db, const LIST& params, STEPDouble_Offset_Shelled_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<shelled_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDraughting_Annotation_Occurrence>(const DB& db, const LIST& params, STEPDraughting_Annotation_Occurrence* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDraughting_Elements>(const DB& db, const LIST& params, STEPDraughting_Elements* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPText_Literal>(const DB& db, const LIST& params, STEPText_Literal* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPText_Literal_With_Delineation>(const DB& db, const LIST& params, STEPText_Literal_With_Delineation* in)
{
	size_t base = GenericFill(db,params,static_cast<text_literal*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPDraughting_Text_Literal_With_Delineation>(const DB& db, const LIST& params, STEPDraughting_Text_Literal_With_Delineation* in)
{
	size_t base = GenericFill(db,params,static_cast<text_literal_with_delineation*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEdge>(const DB& db, const LIST& params, STEPEdge* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEdge_Based_Wireframe_Model>(const DB& db, const LIST& params, STEPEdge_Based_Wireframe_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEdge_Blended_Solid>(const DB& db, const LIST& params, STEPEdge_Blended_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEllipse>(const DB& db, const LIST& params, STEPEllipse* in)
{
	size_t base = GenericFill(db,params,static_cast<conic*>(in));
	if (params.GetSize() < 4) { throw STEP::TypeError("expected 4 arguments to STEPEllipse"); }    do { // convert the 'STEPSemi_Axis_1' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->semi_axis_1, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPEllipse to be a `positive_length_measure`")); }
    } while(0);
    do { // convert the 'STEPSemi_Axis_2' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->semi_axis_2, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPEllipse to be a `positive_length_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEnum_Reference_Prefix>(const DB& db, const LIST& params, STEPEnum_Reference_Prefix* in)
{
	size_t base = GenericFill(db,params,static_cast<descriptive_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPEvaluated_Degenerate_Pcurve>(const DB& db, const LIST& params, STEPEvaluated_Degenerate_Pcurve* in)
{
	size_t base = GenericFill(db,params,static_cast<degenerate_pcurve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPicture_Representation_Item>(const DB& db, const LIST& params, STEPPicture_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<bytes_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExternally_Defined_Picture_Representation_Item>(const DB& db, const LIST& params, STEPExternally_Defined_Picture_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<picture_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSwept_Area_Solid>(const DB& db, const LIST& params, STEPSwept_Area_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPSwept_Area_Solid"); }    do { // convert the 'STEPSwept_Area' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPSwept_Area_Solid,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->swept_area, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPSwept_Area_Solid to be a `curve_bounded_surface`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExtruded_Area_Solid>(const DB& db, const LIST& params, STEPExtruded_Area_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_area_solid*>(in));
	if (params.GetSize() < 4) { throw STEP::TypeError("expected 4 arguments to STEPExtruded_Area_Solid"); }    do { // convert the 'STEPExtruded_Direction' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->extruded_direction, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPExtruded_Area_Solid to be a `direction`")); }
    } while(0);
    do { // convert the 'STEPDepth' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->depth, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPExtruded_Area_Solid to be a `positive_length_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSwept_Face_Solid>(const DB& db, const LIST& params, STEPSwept_Face_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExtruded_Face_Solid>(const DB& db, const LIST& params, STEPExtruded_Face_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_face_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExtruded_Face_Solid_With_Trim_Conditions>(const DB& db, const LIST& params, STEPExtruded_Face_Solid_With_Trim_Conditions* in)
{
	size_t base = GenericFill(db,params,static_cast<extruded_face_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExtruded_Face_Solid_With_Draft_Angle>(const DB& db, const LIST& params, STEPExtruded_Face_Solid_With_Draft_Angle* in)
{
	size_t base = GenericFill(db,params,static_cast<extruded_face_solid_with_trim_conditions*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPExtruded_Face_Solid_With_Multiple_Draft_Angles>(const DB& db, const LIST& params, STEPExtruded_Face_Solid_With_Multiple_Draft_Angles* in)
{
	size_t base = GenericFill(db,params,static_cast<extruded_face_solid_with_trim_conditions*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFace>(const DB& db, const LIST& params, STEPFace* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPFace"); }    do { // convert the 'STEPBounds' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPFace,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->bounds, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPFace to be a `SET [1:?] OF face_bound`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFace_Based_Surface_Model>(const DB& db, const LIST& params, STEPFace_Based_Surface_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPFace_Based_Surface_Model"); }    do { // convert the 'STEPFbsm_Faces' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->fbsm_faces, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPFace_Based_Surface_Model to be a `SET [1:?] OF connected_face_set`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFace_Bound>(const DB& db, const LIST& params, STEPFace_Bound* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPFace_Bound"); }    do { // convert the 'STEPBound' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPFace_Bound,2>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->bound, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPFace_Bound to be a `loop`")); }
    } while(0);
    do { // convert the 'STEPOrientation' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPFace_Bound,2>::aux_is_derived[1]=true; break; }
        try { GenericConvert( in->orientation, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPFace_Bound to be a `BOOLEAN`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFace_Outer_Bound>(const DB& db, const LIST& params, STEPFace_Outer_Bound* in)
{
	size_t base = GenericFill(db,params,static_cast<face_bound*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPFace_Outer_Bound"); }	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFaceted_Brep>(const DB& db, const LIST& params, STEPFaceted_Brep* in)
{
	size_t base = GenericFill(db,params,static_cast<manifold_solid_brep*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFill_Area_Style_Hatching>(const DB& db, const LIST& params, STEPFill_Area_Style_Hatching* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFill_Area_Style_Tile_Coloured_Region>(const DB& db, const LIST& params, STEPFill_Area_Style_Tile_Coloured_Region* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFill_Area_Style_Tile_Curve_With_Style>(const DB& db, const LIST& params, STEPFill_Area_Style_Tile_Curve_With_Style* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFill_Area_Style_Tile_Symbol_With_Style>(const DB& db, const LIST& params, STEPFill_Area_Style_Tile_Symbol_With_Style* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFill_Area_Style_Tiles>(const DB& db, const LIST& params, STEPFill_Area_Style_Tiles* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPFunc>(const DB& db, const LIST& params, STEPFunc* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPGeometric_Set>(const DB& db, const LIST& params, STEPGeometric_Set* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPGeometric_Curve_Set>(const DB& db, const LIST& params, STEPGeometric_Curve_Set* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_set*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPGeometrical_Tolerance_Callout>(const DB& db, const LIST& params, STEPGeometrical_Tolerance_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPGround_Fact>(const DB& db, const LIST& params, STEPGround_Fact* in)
{
	size_t base = GenericFill(db,params,static_cast<atomic_formula*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPHidden_Element_Over_Riding_Styled_Item>(const DB& db, const LIST& params, STEPHidden_Element_Over_Riding_Styled_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<context_dependent_over_riding_styled_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPHyperbola>(const DB& db, const LIST& params, STEPHyperbola* in)
{
	size_t base = GenericFill(db,params,static_cast<conic*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPIncluded_Text_Block>(const DB& db, const LIST& params, STEPIncluded_Text_Block* in)
{
	size_t base = GenericFill(db,params,static_cast<mapped_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPUser_Selected_Elements>(const DB& db, const LIST& params, STEPUser_Selected_Elements* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPIndirectly_Selected_Elements>(const DB& db, const LIST& params, STEPIndirectly_Selected_Elements* in)
{
	size_t base = GenericFill(db,params,static_cast<user_selected_elements*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Curve>(const DB& db, const LIST& params, STEPSurface_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPIntersection_Curve>(const DB& db, const LIST& params, STEPIntersection_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<surface_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLeader_Curve>(const DB& db, const LIST& params, STEPLeader_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_curve_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLeader_Directed_Callout>(const DB& db, const LIST& params, STEPLeader_Directed_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLeader_Directed_Dimension>(const DB& db, const LIST& params, STEPLeader_Directed_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<leader_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLeader_Terminator>(const DB& db, const LIST& params, STEPLeader_Terminator* in)
{
	size_t base = GenericFill(db,params,static_cast<terminator_symbol*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLight_Source>(const DB& db, const LIST& params, STEPLight_Source* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLight_Source_Ambient>(const DB& db, const LIST& params, STEPLight_Source_Ambient* in)
{
	size_t base = GenericFill(db,params,static_cast<light_source*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLight_Source_Directional>(const DB& db, const LIST& params, STEPLight_Source_Directional* in)
{
	size_t base = GenericFill(db,params,static_cast<light_source*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLight_Source_Positional>(const DB& db, const LIST& params, STEPLight_Source_Positional* in)
{
	size_t base = GenericFill(db,params,static_cast<light_source*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLight_Source_Spot>(const DB& db, const LIST& params, STEPLight_Source_Spot* in)
{
	size_t base = GenericFill(db,params,static_cast<light_source*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLine>(const DB& db, const LIST& params, STEPLine* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPLine"); }    do { // convert the 'STEPPnt' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->pnt, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPLine to be a `cartesian_point`")); }
    } while(0);
    do { // convert the 'STEPDir' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->dir, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPLine to be a `vector`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLinear_Dimension>(const DB& db, const LIST& params, STEPLinear_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<dimension_curve_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSimple_Clause>(const DB& db, const LIST& params, STEPSimple_Clause* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLiteral_Conjunction>(const DB& db, const LIST& params, STEPLiteral_Conjunction* in)
{
	size_t base = GenericFill(db,params,static_cast<simple_clause*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLiteral_Disjunction>(const DB& db, const LIST& params, STEPLiteral_Disjunction* in)
{
	size_t base = GenericFill(db,params,static_cast<simple_clause*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPLoop>(const DB& db, const LIST& params, STEPLoop* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPModified_Solid_With_Placed_Configuration>(const DB& db, const LIST& params, STEPModified_Solid_With_Placed_Configuration* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPNull_Representation_Item>(const DB& db, const LIST& params, STEPNull_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOffset_Curve_2d>(const DB& db, const LIST& params, STEPOffset_Curve_2d* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOffset_Curve_3d>(const DB& db, const LIST& params, STEPOffset_Curve_3d* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOffset_Surface>(const DB& db, const LIST& params, STEPOffset_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOne_Direction_Repeat_Factor>(const DB& db, const LIST& params, STEPOne_Direction_Repeat_Factor* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOpen_Shell>(const DB& db, const LIST& params, STEPOpen_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<connected_face_set*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPProjection_Directed_Callout>(const DB& db, const LIST& params, STEPProjection_Directed_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOrdinate_Dimension>(const DB& db, const LIST& params, STEPOrdinate_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<projection_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Closed_Shell>(const DB& db, const LIST& params, STEPOriented_Closed_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<closed_shell*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Edge>(const DB& db, const LIST& params, STEPOriented_Edge* in)
{
	size_t base = GenericFill(db,params,static_cast<edge*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Face>(const DB& db, const LIST& params, STEPOriented_Face* in)
{
	size_t base = GenericFill(db,params,static_cast<face*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Open_Shell>(const DB& db, const LIST& params, STEPOriented_Open_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<open_shell*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPath>(const DB& db, const LIST& params, STEPPath* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Path>(const DB& db, const LIST& params, STEPOriented_Path* in)
{
	size_t base = GenericFill(db,params,static_cast<path*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOriented_Surface>(const DB& db, const LIST& params, STEPOriented_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPOuter_Boundary_Curve>(const DB& db, const LIST& params, STEPOuter_Boundary_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<boundary_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPParabola>(const DB& db, const LIST& params, STEPParabola* in)
{
	size_t base = GenericFill(db,params,static_cast<conic*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPcurve>(const DB& db, const LIST& params, STEPPcurve* in)
{
	size_t base = GenericFill(db,params,static_cast<curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPlanar_Extent>(const DB& db, const LIST& params, STEPPlanar_Extent* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPlanar_Box>(const DB& db, const LIST& params, STEPPlanar_Box* in)
{
	size_t base = GenericFill(db,params,static_cast<planar_extent*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPlane>(const DB& db, const LIST& params, STEPPlane* in)
{
	size_t base = GenericFill(db,params,static_cast<elementary_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPoint_On_Curve>(const DB& db, const LIST& params, STEPPoint_On_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<point*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPoint_On_Surface>(const DB& db, const LIST& params, STEPPoint_On_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<point*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPoint_Replica>(const DB& db, const LIST& params, STEPPoint_Replica* in)
{
	size_t base = GenericFill(db,params,static_cast<point*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPoly_Loop>(const DB& db, const LIST& params, STEPPoly_Loop* in)
{
	size_t base = 0;
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPPoly_Loop"); }    do { // convert the 'STEPPolygon' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->polygon, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 0 to STEPPoly_Loop to be a `LIST [3:?] OF cartesian_point`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPolyline>(const DB& db, const LIST& params, STEPPolyline* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_curve*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPPolyline"); }    do { // convert the 'STEPPoints' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->points, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPPolyline to be a `LIST [2:?] OF cartesian_point`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPositioned_Sketch>(const DB& db, const LIST& params, STEPPositioned_Sketch* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPredefined_Picture_Representation_Item>(const DB& db, const LIST& params, STEPPredefined_Picture_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<picture_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPresentation_Style_Assignment>(const DB& db, const LIST& params, STEPPresentation_Style_Assignment* in)
{
	size_t base = GenericFill(db,params,static_cast<founded_item*>(in));
	if (params.GetSize() < 1) { throw STEP::TypeError("expected 1 arguments to STEPPresentation_Style_Assignment"); }    do { // convert the 'STEPStyles' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPPresentation_Style_Assignment,1>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->styles, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 0 to STEPPresentation_Style_Assignment to be a `SET [1:?] OF presentation_style_select`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPPresentation_Style_By_Context>(const DB& db, const LIST& params, STEPPresentation_Style_By_Context* in)
{
	size_t base = GenericFill(db,params,static_cast<presentation_style_assignment*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPProcedural_Representation_Sequence>(const DB& db, const LIST& params, STEPProcedural_Representation_Sequence* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPProjection_Curve>(const DB& db, const LIST& params, STEPProjection_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<annotation_curve_occurrence*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPQualified_Representation_Item>(const DB& db, const LIST& params, STEPQualified_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPQuasi_Uniform_Curve>(const DB& db, const LIST& params, STEPQuasi_Uniform_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPQuasi_Uniform_Surface>(const DB& db, const LIST& params, STEPQuasi_Uniform_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRadius_Dimension>(const DB& db, const LIST& params, STEPRadius_Dimension* in)
{
	size_t base = GenericFill(db,params,static_cast<dimension_curve_directed_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRational_B_Spline_Curve>(const DB& db, const LIST& params, STEPRational_B_Spline_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRational_B_Spline_Surface>(const DB& db, const LIST& params, STEPRational_B_Spline_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRectangular_Composite_Surface>(const DB& db, const LIST& params, STEPRectangular_Composite_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRectangular_Trimmed_Surface>(const DB& db, const LIST& params, STEPRectangular_Trimmed_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPReparametrised_Composite_Curve_Segment>(const DB& db, const LIST& params, STEPReparametrised_Composite_Curve_Segment* in)
{
	size_t base = GenericFill(db,params,static_cast<composite_curve_segment*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRevolved_Area_Solid>(const DB& db, const LIST& params, STEPRevolved_Area_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_area_solid*>(in));
	if (params.GetSize() < 4) { throw STEP::TypeError("expected 4 arguments to STEPRevolved_Area_Solid"); }    do { // convert the 'STEPAxis' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->axis, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPRevolved_Area_Solid to be a `axis1_placement`")); }
    } while(0);
    do { // convert the 'STEPAngle' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->angle, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPRevolved_Area_Solid to be a `plane_angle_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRevolved_Face_Solid>(const DB& db, const LIST& params, STEPRevolved_Face_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_face_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRevolved_Face_Solid_With_Trim_Conditions>(const DB& db, const LIST& params, STEPRevolved_Face_Solid_With_Trim_Conditions* in)
{
	size_t base = GenericFill(db,params,static_cast<revolved_face_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRight_Angular_Wedge>(const DB& db, const LIST& params, STEPRight_Angular_Wedge* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRight_Circular_Cone>(const DB& db, const LIST& params, STEPRight_Circular_Cone* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRight_Circular_Cylinder>(const DB& db, const LIST& params, STEPRight_Circular_Cylinder* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRow_Representation_Item>(const DB& db, const LIST& params, STEPRow_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRow_Value>(const DB& db, const LIST& params, STEPRow_Value* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRule_Condition>(const DB& db, const LIST& params, STEPRule_Condition* in)
{
	size_t base = GenericFill(db,params,static_cast<atomic_formula*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Curve_Swept_Area_Solid>(const DB& db, const LIST& params, STEPSurface_Curve_Swept_Area_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_area_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPRuled_Surface_Swept_Area_Solid>(const DB& db, const LIST& params, STEPRuled_Surface_Swept_Area_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<surface_curve_swept_area_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSculptured_Solid>(const DB& db, const LIST& params, STEPSculptured_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSeam_Curve>(const DB& db, const LIST& params, STEPSeam_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<surface_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPShell_Based_Surface_Model>(const DB& db, const LIST& params, STEPShell_Based_Surface_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPShell_Based_Surface_Model"); }    do { // convert the 'STEPSbsm_Boundary' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->sbsm_boundary, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPShell_Based_Surface_Model to be a `SET [1:?] OF shell`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPShell_Based_Wireframe_Model>(const DB& db, const LIST& params, STEPShell_Based_Wireframe_Model* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_Replica>(const DB& db, const LIST& params, STEPSolid_Replica* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Chamfered_Edges>(const DB& db, const LIST& params, STEPSolid_With_Chamfered_Edges* in)
{
	size_t base = GenericFill(db,params,static_cast<edge_blended_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Angle_Based_Chamfer>(const DB& db, const LIST& params, STEPSolid_With_Angle_Based_Chamfer* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_chamfered_edges*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Shape_Element_Pattern>(const DB& db, const LIST& params, STEPSolid_With_Shape_Element_Pattern* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid_with_placed_configuration*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Circular_Pattern>(const DB& db, const LIST& params, STEPSolid_With_Circular_Pattern* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_shape_element_pattern*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Depression>(const DB& db, const LIST& params, STEPSolid_With_Depression* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid_with_placed_configuration*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Pocket>(const DB& db, const LIST& params, STEPSolid_With_Pocket* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_depression*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Circular_Pocket>(const DB& db, const LIST& params, STEPSolid_With_Circular_Pocket* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_pocket*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Protrusion>(const DB& db, const LIST& params, STEPSolid_With_Protrusion* in)
{
	size_t base = GenericFill(db,params,static_cast<modified_solid_with_placed_configuration*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Circular_Protrusion>(const DB& db, const LIST& params, STEPSolid_With_Circular_Protrusion* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_protrusion*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Hole>(const DB& db, const LIST& params, STEPSolid_With_Hole* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_depression*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Stepped_Round_Hole>(const DB& db, const LIST& params, STEPSolid_With_Stepped_Round_Hole* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_hole*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Conical_Bottom_Round_Hole>(const DB& db, const LIST& params, STEPSolid_With_Conical_Bottom_Round_Hole* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_stepped_round_hole*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Constant_Radius_Edge_Blend>(const DB& db, const LIST& params, STEPSolid_With_Constant_Radius_Edge_Blend* in)
{
	size_t base = GenericFill(db,params,static_cast<edge_blended_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Slot>(const DB& db, const LIST& params, STEPSolid_With_Slot* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_depression*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Curved_Slot>(const DB& db, const LIST& params, STEPSolid_With_Curved_Slot* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_slot*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Double_Offset_Chamfer>(const DB& db, const LIST& params, STEPSolid_With_Double_Offset_Chamfer* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_chamfered_edges*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Flat_Bottom_Round_Hole>(const DB& db, const LIST& params, STEPSolid_With_Flat_Bottom_Round_Hole* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_stepped_round_hole*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_General_Pocket>(const DB& db, const LIST& params, STEPSolid_With_General_Pocket* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_pocket*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_General_Protrusion>(const DB& db, const LIST& params, STEPSolid_With_General_Protrusion* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_protrusion*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Groove>(const DB& db, const LIST& params, STEPSolid_With_Groove* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_depression*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Incomplete_Circular_Pattern>(const DB& db, const LIST& params, STEPSolid_With_Incomplete_Circular_Pattern* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_circular_pattern*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Rectangular_Pattern>(const DB& db, const LIST& params, STEPSolid_With_Rectangular_Pattern* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_shape_element_pattern*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Incomplete_Rectangular_Pattern>(const DB& db, const LIST& params, STEPSolid_With_Incomplete_Rectangular_Pattern* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_rectangular_pattern*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Rectangular_Pocket>(const DB& db, const LIST& params, STEPSolid_With_Rectangular_Pocket* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_pocket*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Rectangular_Protrusion>(const DB& db, const LIST& params, STEPSolid_With_Rectangular_Protrusion* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_protrusion*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Single_Offset_Chamfer>(const DB& db, const LIST& params, STEPSolid_With_Single_Offset_Chamfer* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_chamfered_edges*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Spherical_Bottom_Round_Hole>(const DB& db, const LIST& params, STEPSolid_With_Spherical_Bottom_Round_Hole* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_stepped_round_hole*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Stepped_Round_Hole_And_Conical_Transitions>(const DB& db, const LIST& params, STEPSolid_With_Stepped_Round_Hole_And_Conical_Transitions* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_stepped_round_hole*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Straight_Slot>(const DB& db, const LIST& params, STEPSolid_With_Straight_Slot* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_slot*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Tee_Section_Slot>(const DB& db, const LIST& params, STEPSolid_With_Tee_Section_Slot* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_slot*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Through_Depression>(const DB& db, const LIST& params, STEPSolid_With_Through_Depression* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_depression*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSolid_With_Trapezoidal_Section_Slot>(const DB& db, const LIST& params, STEPSolid_With_Trapezoidal_Section_Slot* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_with_slot*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSphere>(const DB& db, const LIST& params, STEPSphere* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSpherical_Surface>(const DB& db, const LIST& params, STEPSpherical_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<elementary_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPStructured_Dimension_Callout>(const DB& db, const LIST& params, STEPStructured_Dimension_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPStructured_Text_Composition>(const DB& db, const LIST& params, STEPStructured_Text_Composition* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSubedge>(const DB& db, const LIST& params, STEPSubedge* in)
{
	size_t base = GenericFill(db,params,static_cast<edge*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSubface>(const DB& db, const LIST& params, STEPSubface* in)
{
	size_t base = GenericFill(db,params,static_cast<face*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Condition_Callout>(const DB& db, const LIST& params, STEPSurface_Condition_Callout* in)
{
	size_t base = GenericFill(db,params,static_cast<draughting_callout*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSwept_Surface>(const DB& db, const LIST& params, STEPSwept_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Of_Linear_Extrusion>(const DB& db, const LIST& params, STEPSurface_Of_Linear_Extrusion* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Of_Revolution>(const DB& db, const LIST& params, STEPSurface_Of_Revolution* in)
{
	size_t base = GenericFill(db,params,static_cast<swept_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Replica>(const DB& db, const LIST& params, STEPSurface_Replica* in)
{
	size_t base = GenericFill(db,params,static_cast<surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Style_Rendering>(const DB& db, const LIST& params, STEPSurface_Style_Rendering* in)
{
	size_t base = 0;
	if (params.GetSize() < 2) { throw STEP::TypeError("expected 2 arguments to STEPSurface_Style_Rendering"); }    do { // convert the 'STEPRendering_Method' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPSurface_Style_Rendering,2>::aux_is_derived[0]=true; break; }
        try { GenericConvert( in->rendering_method, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 0 to STEPSurface_Style_Rendering to be a `shading_surface_method`")); }
    } while(0);
    do { // convert the 'STEPSurface_Colour' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const ISDERIVED*>(&*arg)) { in->ObjectHelper<Assimp::STEP::STEPSurface_Style_Rendering,2>::aux_is_derived[1]=true; break; }
        try { GenericConvert( in->surface_colour, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPSurface_Style_Rendering to be a `colour`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurface_Style_Rendering_With_Properties>(const DB& db, const LIST& params, STEPSurface_Style_Rendering_With_Properties* in)
{
	size_t base = GenericFill(db,params,static_cast<surface_style_rendering*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSurfaced_Open_Shell>(const DB& db, const LIST& params, STEPSurfaced_Open_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<open_shell*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSwept_Disk_Solid>(const DB& db, const LIST& params, STEPSwept_Disk_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
	if (params.GetSize() < 6) { throw STEP::TypeError("expected 6 arguments to STEPSwept_Disk_Solid"); }    do { // convert the 'STEPDirectrix' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->directrix, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPSwept_Disk_Solid to be a `curve`")); }
    } while(0);
    do { // convert the 'STEPRadius' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->radius, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPSwept_Disk_Solid to be a `positive_length_measure`")); }
    } while(0);
    do { // convert the 'STEPInner_Radius' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        if (dynamic_cast<const UNSET*>(&*arg)) break;
        try { GenericConvert( in->inner_radius, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPSwept_Disk_Solid to be a `positive_length_measure`")); }
    } while(0);
    do { // convert the 'STEPStart_Param' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->start_param, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 4 to STEPSwept_Disk_Solid to be a `REAL`")); }
    } while(0);
    do { // convert the 'STEPEnd_Param' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->end_param, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 5 to STEPSwept_Disk_Solid to be a `REAL`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSymbol>(const DB& db, const LIST& params, STEPSymbol* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPSymbol_Target>(const DB& db, const LIST& params, STEPSymbol_Target* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTable_Representation_Item>(const DB& db, const LIST& params, STEPTable_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTagged_Text_Item>(const DB& db, const LIST& params, STEPTagged_Text_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<descriptive_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPText_Literal_With_Associated_Curves>(const DB& db, const LIST& params, STEPText_Literal_With_Associated_Curves* in)
{
	size_t base = GenericFill(db,params,static_cast<text_literal*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPText_Literal_With_Blanking_Box>(const DB& db, const LIST& params, STEPText_Literal_With_Blanking_Box* in)
{
	size_t base = GenericFill(db,params,static_cast<text_literal*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPText_Literal_With_Extent>(const DB& db, const LIST& params, STEPText_Literal_With_Extent* in)
{
	size_t base = GenericFill(db,params,static_cast<text_literal*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPThickened_Face_Solid>(const DB& db, const LIST& params, STEPThickened_Face_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<solid_model*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTorus>(const DB& db, const LIST& params, STEPTorus* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTrack_Blended_Solid>(const DB& db, const LIST& params, STEPTrack_Blended_Solid* in)
{
	size_t base = GenericFill(db,params,static_cast<edge_blended_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTrack_Blended_Solid_With_End_Conditions>(const DB& db, const LIST& params, STEPTrack_Blended_Solid_With_End_Conditions* in)
{
	size_t base = GenericFill(db,params,static_cast<track_blended_solid*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTrimmed_Curve>(const DB& db, const LIST& params, STEPTrimmed_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<bounded_curve*>(in));
	if (params.GetSize() < 6) { throw STEP::TypeError("expected 6 arguments to STEPTrimmed_Curve"); }    do { // convert the 'STEPBasis_Curve' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->basis_curve, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPTrimmed_Curve to be a `curve`")); }
    } while(0);
    do { // convert the 'STEPTrim_1' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->trim_1, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPTrimmed_Curve to be a `SET [1:2] OF trimming_select`")); }
    } while(0);
    do { // convert the 'STEPTrim_2' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->trim_2, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 3 to STEPTrimmed_Curve to be a `SET [1:2] OF trimming_select`")); }
    } while(0);
    do { // convert the 'STEPSense_Agreement' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->sense_agreement, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 4 to STEPTrimmed_Curve to be a `BOOLEAN`")); }
    } while(0);
    do { // convert the 'STEPMaster_Representation' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->master_representation, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 5 to STEPTrimmed_Curve to be a `trimming_preference`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPTwo_Direction_Repeat_Factor>(const DB& db, const LIST& params, STEPTwo_Direction_Repeat_Factor* in)
{
	size_t base = GenericFill(db,params,static_cast<one_direction_repeat_factor*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPUniform_Curve>(const DB& db, const LIST& params, STEPUniform_Curve* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_curve*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPUniform_Resource_Identifier>(const DB& db, const LIST& params, STEPUniform_Resource_Identifier* in)
{
	size_t base = GenericFill(db,params,static_cast<descriptive_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPUniform_Surface>(const DB& db, const LIST& params, STEPUniform_Surface* in)
{
	size_t base = GenericFill(db,params,static_cast<b_spline_surface*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPUser_Selected_Shape_Elements>(const DB& db, const LIST& params, STEPUser_Selected_Shape_Elements* in)
{
	size_t base = GenericFill(db,params,static_cast<user_selected_elements*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPValue_Range>(const DB& db, const LIST& params, STEPValue_Range* in)
{
	size_t base = GenericFill(db,params,static_cast<compound_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPValue_Representation_Item>(const DB& db, const LIST& params, STEPValue_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPVariational_Representation_Item>(const DB& db, const LIST& params, STEPVariational_Representation_Item* in)
{
	size_t base = GenericFill(db,params,static_cast<representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPVector>(const DB& db, const LIST& params, STEPVector* in)
{
	size_t base = GenericFill(db,params,static_cast<geometric_representation_item*>(in));
	if (params.GetSize() < 3) { throw STEP::TypeError("expected 3 arguments to STEPVector"); }    do { // convert the 'STEPOrientation' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->orientation, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 1 to STEPVector to be a `direction`")); }
    } while(0);
    do { // convert the 'STEPMagnitude' argument
        boost::shared_ptr<const DataType> arg = params[base++];
        try { GenericConvert( in->magnitude, arg, db ); break; } 
        catch (const TypeError& t) { throw TypeError(t.what() + std::string(" - expected argument 2 to STEPVector to be a `length_measure`")); }
    } while(0);
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPVertex>(const DB& db, const LIST& params, STEPVertex* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPVertex_Loop>(const DB& db, const LIST& params, STEPVertex_Loop* in)
{
	size_t base = GenericFill(db,params,static_cast<loop*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPVertex_Shell>(const DB& db, const LIST& params, STEPVertex_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}
// -----------------------------------------------------------------------------------------------------------
template <> size_t GenericFill<STEPWire_Shell>(const DB& db, const LIST& params, STEPWire_Shell* in)
{
	size_t base = GenericFill(db,params,static_cast<topological_representation_item*>(in));
// this data structure is not used yet, so there is no code generated to fill its members
	return base;
}

} // ! STEP
} // ! Assimp

#endif
